/// ╔═══════════════════════════════════╗
/// ║	Globals							║
/// ╚═══════════════════════════════════╝
/// ╔═══════════════════════════════════╗
/// ║	AI Adaptive Money Flow Index	║
/// ╔═══════════════════════════════════╗
/// ║	Tsi & Divergences				║
/// ║	@	Allen.						║
/// ╚═══════════════════════════════════╝

//@version=5
indicator(title							= 'AI Mfi & Multi Tsi & Panel Mtf [🎱 Allen 㔬]',
		  shorttitle					= 'Mfi & MTsi & Panel',
		//   overlay						= false,
		// //   precision					= 2,
		  format						= format.price,
		  precision						= 4
		//   explicit_plot_zorder			= true
		  )

//// ─────────────────────────────────────────────────────────────────────

/// ───────────────────────
/// ─── Colors
/// ───────────────────────

AmeTrBlueFrost							= #E1EEF9
AmeTrGrayNickel							= #F1F1F1
GraySwebSecondaryText					= #77708A
ARoPrimary								= #0035FF
MongoSky10								= #E3FCF7
BrLiYel10								= #FBFD73
BrLiYel40								= #FEF301
VictSecFucsia50							= #EA1889
PlatziGreen30							= #ADEB42
PlatziBlue50							= #24385B
PlatziBlue70							= #121F3D
PlatziBlue80							= #0C1633
UltrRose20								= #FFA3E3
AllenSky10								= #CCF8FF
AllenMint60								= #33FFAC
AllenFucsia50							= #EA1889

//// ─────────────────────────────────────────────────────────────────────

strGlobalOptionalTooltip				= "Lineas alternas con temporalidad modificada: 15 min, 30 min, 1 Hora, 2 Horas, 3 Horas, 4 Horas "

/// ───────────────────────
/// ─── Variables
/// ───────────────────────

insGlobalTFCoefficient					= input.int		(defval = 2,			title = "Coeficiente timeframe",	minval = 1,	maxval = 5,	step = 1)
strGlobalOptionalTimeFrame				= input.string 	(defval = "2 Horas",	title = "Timegrame opcional",		group = "Global Timeframe",		inline = "OpcionaTF",
			  options					=				["15 min", "30 min", "1 Hora", "2 Horas", "3 Horas", "4 Horas", "1 Dia", "1 Semana", "1 Mes"])

/// ───────────────────────
/// ─── Types
/// ───────────────────────

type globalTypeOHL
	float O								= open
	float H								= high
	float L								= low
	float C								= close
	float V								= volume
	int   I								= bar_index

/// ───────────────────────
/// ─── Functions
/// ───────────────────────

/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		"Grafico"						=> timeframe.period
		"1 seg"							=> "S"	
		"5 seg"							=> "5S"
		"10 seg"						=> "10S"
		"15 seg"						=> "15S"
		"30 seg"						=> "30S"
		"1 min"							=> "1"	
		"3 min"							=> "3"	
		"5 min"							=> "5"
		"15 min"						=> "15"
		"30 min"						=> "30"
		"1 Hora"						=> "60"
		"2 Horas"						=> "120"
		"3 Horas"						=> "180"
		"4 Horas"						=> "240"
		"8 horas"						=> "480"
		"1 Dia"							=> "D"
		"1 Dia"							=> "1D"
		"1 Semana"						=> "W"
		"1 Semana"						=> "1W"
		"1 Mes"							=> "M"
		"1 Mes"							=> "1M"

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		"arriba"						=> "top"
		"medio"							=> "middle"
		"abajo"							=> "bottom"

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		"izquierda"						=> "left"
		"centro"						=> "center"
		"derecha"						=> "right"

/// ─── function position
FunGlobalPosition(_position) =>
	switch _position
		"Externo"						=> "outside"
		"Interno"						=> "inside"

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		"Mini"							=> size.tiny
		"Pequeño"						=> size.small
		"Normal"						=> size.normal
		"Grande"						=> size.large
		"Enorme"						=> size.huge
		"Auto"							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		"NYSE"							=> "UTC-5"
		"New York"						=> "America/New_York"
		"Chicago"						=> "America/Chicago"
		"Londres"						=> "Europe/London"
		"Tokyo"							=> "Asia/Tokyo"
		"Shanghai"						=> "Asia/Shanghai"
		"Sydney"						=> "Australia/Sydney"
		"Argentina"						=> "America/Argentina/Buenos_Aires"


/// ─── function calculate MA
FunGlobalCalculateMA(_source, _length, _type) =>
	switch _type
		"SMA"							=> ta.sma	(_source, _length)
		"HMA"							=> ta.hma	(_source, _length)
		"EMA"							=> ta.ema	(_source, _length)
		"SMMA"							=> ta.rma	(_source, _length)
		"WMA"							=> ta.wma	(_source, _length)
		"VWMA"							=> ta.vwma	(_source, _length)
		"MFI"							=> ta.mfi	(_source, _length)

/// ─── Function calculate timeframe
FunGlobalCalculateTimeframeRange(_coefficient, _timeframe) =>
	_x									= 3
	_mayor								= 500
	_minor								= 15
	_operat_coeff						= _tonumber * _coefficient
	_operat_minor						= _tonumber * _x
	_tonumber							= str.tonumber(_timeframe)
	_conditional						= _tonumber > _mayor ? _tonumber <= _minor ? _operat_minor : _operat_coeff
	// _tostring							= str.tostring(_conditional)
	str.tostring(_conditional)

/// ───────────────────────
/// ─── Instances
/// ───────────────────────

globalOHL								= globalTypeOHL.new()

/// Instance function timeframe
// FunGlobalTimeFrame(strGlobalTimeFrame)

//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║	AI Adaptative MFI				║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

adapMonToolAdj				= "Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos"
adapMonToolMlt				= "Aumente esto para que los números de clasificación aparezcan más lejos del gráfico del oscilador"

adapMonGrpSet				= "Configuracion FMI"
adapMonGrpLim				= "Clustering Setting"
adapMonGrpApar				= "Apariencia"

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Vars ─────────
//// ───────────────────────

adapMonVarSRC				= input.source	(defval = hlc3,	title = "Fuente MFI",										group = adapMonGrpSet)
adapMonVarLENGTH			= input.int		(defval = 14,	title = "Longitud MFI",							minval = 1,	group = adapMonGrpSet)
adapMonVarDataLength		= input.int		(defval = 300,	title = "Tamaño de datos de entrenamiento",		minval = 1,	group = adapMonGrpLim)
adapMonVarIterations		= input.int		(defval = 5,	title = "Cantidad de iteraciones por barra",	minval = 1,	group = adapMonGrpLim)
adapMonVarOverbought		= input.float	(defval = 80.0,	title = "Inicio de Sobre Compra",							group = adapMonGrpLim)
adapMonVarNeutral			= input.float	(defval = 50.0,	title = "Neutral",											group = adapMonGrpLim)
adapMonVarOversold			= input.float	(defval = 20.0,	title = "Inicio de Sobre Venta",							group = adapMonGrpLim)

adapMonVarADJ				= input.bool	(defval = true,	title = "Usar MFI ajustado",								group = adapMonGrpApar,		tooltip = adapMonToolAdj)
adapMonVarMLT				= input.float	(defval = 1.0,	title = "Multiplicador",									group = adapMonGrpApar,		tooltip = adapMonToolMlt)

adapMonColorLong			= input.color	(AllenMint60,	title = "Compra",											group = adapMonGrpApar)
adapMonColorShort			= input.color	(AllenSky10,	title = "Venta",											group = adapMonGrpApar)

adapMonVaExAA				= adapMonVarOverbought
adapMonVaExBB				= adapMonVarNeutral
adapMonVaExCC				= adapMonVarOversold

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Functions ────
//// ───────────────────────

adapMonVarOSC				= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB			= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE			= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS			= array.new_float(1, adapMonVarOversold)

if nz(adapMonVarOSC) > 0
	for j = adapMonVarIterations to 1

		adapMonArrOB.clear()
		adapMonArrNE.clear()
		adapMonArrOS.clear()

		for i = adapMonVarDataLength to 0

			if math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrNE.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExBB) and math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrOB.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExBB)
				adapMonArrOS.push(adapMonVarOSC[i])
		
		adapMonVaExAA		:= array.avg(adapMonArrOB)
		adapMonVaExBB		:= array.avg(adapMonArrNE)
		adapMonVaExCC		:= array.avg(adapMonArrOS)

adapMonArrNE_NEW			= array.avg(adapMonArrNE)
adapMonArrOB_NEW			= array.avg(adapMonArrOB)
adapMonArrOS_NEW			= array.avg(adapMonArrOS)

positionBetweenBands		= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL				= adapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncST				= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

adapMonIfCOLOR100			= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 90) : color.new(adapMonColorShort, 90)
adapMonIfCOLOR0				= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 0) : color.new(adapMonColorShort, 0)

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Display ──────
//// ───────────────────────

adapMonPlotMAIN		= plot	(adapMonIfVAL,						color = adapMonIfCOLOR100)
adapMonPlotMID		= plot	(adapMonVarADJ ? adapMonVarNeutral : adapMonArrNE_NEW,		color = adapMonIfCOLOR100)

plot				(adapMonVarADJ ? 100 : adapMonArrOB_NEW,	color =  color.from_gradient(adapMonVarOSC, adapMonArrNE_NEW, adapMonVarADJ ? 100 : adapMonArrOB_NEW, color.new(color.gray, 70), color.new(adapMonColorShort, 0)), linewidth = 6)
plot				(adapMonVarADJ ? 0 : adapMonArrOS_NEW,		color = color.from_gradient(adapMonVarOSC, adapMonVarADJ ? 0 : adapMonArrOS_NEW, adapMonArrNE_NEW, color.new(adapMonColorLong, 0), color.new(color.gray, 70)), linewidth = 6)

plotchar			(ta.crossunder(adapMonVarOSC, adapMonArrOB_NEW) ? (adapMonVarADJ ? 100 : adapMonArrOB_NEW) + 10 : na,	"Corrección Venta",		"▼",	location.absolute, adapMonColorShort, size = size.tiny)
plotchar			(ta.crossover(adapMonVarOSC, adapMonArrOS_NEW) ? (adapMonVarADJ ? 0 : adapMonArrOS_NEW) - 10 : na,		"Corrección Compra",	"▲",	location.absolute, adapMonColorLong, size = size.tiny)

fill				(adapMonPlotMID, adapMonPlotMAIN, color = adapMonIfCOLOR100, title = "Area de Tendencia")
fill				(adapMonPlotMID, adapMonPlotMAIN, adapMonIfVAL, adapMonVarADJ ? 50 : adapMonArrNE_NEW, color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

/// ─── Colors ───
colorTsiMuDiBaseLong				= PlatziGreen30
colorTsiMuDiBaseShort				= VictSecFucsia50

colorTsiMuDiDivergLong				= AllenMint60
colorTsiMuDiDivergShort				= AllenSky10
colorTsiMuDiDivergNone				= color.new(PlatziBlue80,		100)

colorTsiMuDiLineFillLong			= color.new(PlatziGreen30,		0)
colorTsiMuDiLineFillShort			= color.new(VictSecFucsia50,	0)

colorTsiMuDiText					= color.new(PlatziBlue70,		0)
colorTsiMuDiTSI						= color.new(AllenSky10,			20)

/// ─── Inputs ───
groupTsiMuDiTSIVars					= 'TSI & Divergences'
showTsiMuDiTSIDivergs				= input.bool	(defval = false,	title = 'TSI & Divergences')
showTsiMuDiTSIOptionalTF			= input.bool	(defval = true,		title = "Timeframe Opcional",			group = groupTsiMuDiTSIVars,		inline = "OpcionaTF")

vTsiMuDiLong						= input.int		(defval = 6,		title = 'Longitud de Compra',			group = groupTsiMuDiTSIVars)
vTsiMuDiShort						= input.int		(defval = 13,		title = 'Longitud de Venta',			group = groupTsiMuDiTSIVars)
vTsiMuDiSignal						= 5									//	Longitud de la SEÑAL

/// ─── divergences ───
vTsiMuDiLBR							= 5									//	Corrección a la derecha
vTsiMuDiLBL							= 5									//	Corrección a la izquierda
vTsiMuDiRangeUpper					= 30								//	Rango de corrección maximo
vTsiMuDiRangeLower					= 2									//	Rango de corrección minimo
/// ─── Show ───
showTsiMuDiPlotDiverg				= input.bool	(defval = true,		title = 'Divergencias',					group = groupTsiMuDiTSIVars)
showTsiMuDiPlotDivergScalp			= input.bool	(defval = true,		title = 'Divergencias scalp',			group = groupTsiMuDiTSIVars)
showTsiMuDiCloudOn					= input.bool	(defval = true,		title = 'TSI Cloud',					group = groupTsiMuDiTSIVars)

vTsiMuDiSource						= globalOHL.C[0]

//// ───────────────────────
/// ─── Functions ───
//// ───────────────────────


double_smooth(_source, vTsiMuDiLong, vTsiMuDiShort) =>
	fist_smooth = ta.ema(_source, vTsiMuDiLong)
	ta.ema(fist_smooth, vTsiMuDiShort)

/// visual function NOW
insTsiMuDiPrice						= ta.change(vTsiMuDiSource)
insTsiMuDiDouble_smoothed_price		= double_smooth(insTsiMuDiPrice, vTsiMuDiLong, vTsiMuDiShort)
insTsiMuDiDouble_smoothed_abs_price	= double_smooth(math.abs(insTsiMuDiPrice), vTsiMuDiLong, vTsiMuDiShort)
insTsiMuDiTsi_value					= 125 * (insTsiMuDiDouble_smoothed_price / insTsiMuDiDouble_smoothed_abs_price) + 50

insTsiMuDiEmaLine					= ta.ema(insTsiMuDiTsi_value, vTsiMuDiSignal)







FunTsiMuDiCalculateTSI(_source, _long, _short) =>
	_x									= 125
	_plus								= 50
	_change								= ta.change(_source)

	_F_double_smooth(_source, _long, _short) =>
		fist_smooth						= ta.ema(_source, _long)
		ta.ema(fist_smooth, _short)

	_smooth								= _F_double_smooth(_change, _long, _short)
	_smooth_abs							= _F_double_smooth(math.abs(_change), _long, _short)
	// _value								= _x * (_smooth, _smooth_abs) + _plus.
	_x * (_smooth / _smooth_abs) + _plus.

// FunTsiMuDiCalculateTSI(_double_smooth, _source, _long, _short) =>
// 	_x									= 125
// 	_plus								= 50
// 	_change								= ta.change(_source)
// 	_smooth								= double_smooth(_change, _long, _short)
// 	_smooth_abs							= double_smooth(math.abs(_change), _long, _short)
// 	// _value								= _x * (_smooth, _smooth_abs) + _plus.
// 	_x * (_smooth, _smooth_abs) + _plus.


iTsiMuDiCalculateTSI					= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
insTsiMuDiEmaLine						= ta.ema(iTsiMuDiCalculateTSI, vTsiMuDiSignal)







/// ─── plot color now ───
insTsiMuDiFillColor					= showTsiMuDiCloudOn	and insTsiMuDiTsi_value > insTsiMuDiEmaLine	? colorTsiMuDiLineFillLong	: showTsiMuDiCloudOn	and insTsiMuDiTsi_value <= insTsiMuDiEmaLine	? colorTsiMuDiLineFillShort	: na
/// ─── fill color NOW ───
insTsiMuDiCloudColor				= showTsiMuDiCloudOn	and insTsiMuDiTsi_value > insTsiMuDiEmaLine	? colorTsiMuDiBaseLong		: showTsiMuDiCloudOn	and insTsiMuDiTsi_value <= insTsiMuDiEmaLine	? colorTsiMuDiBaseShort		: na

iTsiMudiTfPeriodNumber				= str.tonumber(FunGlobalTimeFrame(strGlobalTimeFrame))
iTsiMudiTfPerMinor					= iTsiMudiTfPeriodNumber * 3
iTsiMudiTfPerMedium					= iTsiMudiTfPeriodNumber * insGlobalTFCoefficient
iTsiMudiTfPerMayor					= str.tonumber(timeframe.period)
iTsiMudiTfPeriodIf					= iTsiMudiTfPeriodNumber > 500 ? iTsiMudiTfPerMayor : iTsiMudiTfPeriodNumber <= 15 ? iTsiMudiTfPerMinor : iTsiMudiTfPerMedium
iTsiMudiTfPerString					= str.tostring(iTsiMudiTfPeriodIf)





vTsiMuDiTFModTSI					= insTsiMuDiTsi_value

/// ─── Multitimeframe Tsi ───
arrTsiMuDiTF	= request.security(syminfo.tickerid,	iTsiMudiTfPerString,	vTsiMuDiTFModTSI,	barmerge.gaps_on)
// [arrTsiMuDiTF,	arrTsiMuDiTF_1,	arrTsiMuDiTF_2]	= request.security(syminfo.tickerid,	iTsiMudiTfPerString,	[vTsiMuDiTFModTSI,	vTsiMuDiTFModTSI[1],	vTsiMuDiTFModTSI[2]],	barmerge.gaps_on)

/// ─── Plot NOW tsi blue ───
plot(arrTsiMuDiTF,																	color = color.new(PlatziBlue70, 60),			linewidth = 6)
plot(ta.ema(arrTsiMuDiTF,	vTsiMuDiSignal),										color = color.new(PlatziBlue70, 60),			linewidth = 6)

/// ─── Plot NOW tsi ───
insTsiMuDiTsiPlotLine				= plot(arrTsiMuDiTF,							color = color.new(insTsiMuDiFillColor, 30),		linewidth = 2)
insTsiMuDiEmaPlotLine				= plot(ta.ema(arrTsiMuDiTF,	vTsiMuDiSignal),	color = color.new(insTsiMuDiFillColor, 30),		linewidth = 2)

/// ─── fill NOW ───
fill(insTsiMuDiTsiPlotLine, insTsiMuDiEmaPlotLine,									color = color.new(insTsiMuDiCloudColor, 70))





 
/// ─── Plot Timeframe light ───
plot(arrTsiMuDiTF,																			color = color.new(AmeTrBlueFrost, 60),			linewidth = 1)
plot(ta.ema(arrTsiMuDiTF,	vTsiMuDiSignal),												color = color.new(AmeTrBlueFrost, 60),			linewidth = 1)


/// ─── Show TSI
// swTsiMuDiTSITF15					= plot(showTsiMuDiTSIPanelTimeF and showTsiMuDiTSITF15	? arrTsiMuDiTF15	: na,	linewidth = 2,	color = colorTsiMuDiTSI)

// /// ────────────────────────────────────────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Divergences ───
//// ───────────────────────

insTsiMuDiPLFound					= na(ta.pivotlow(vTsiMuDiTFModTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true
insTsiMuDiPHFound					= na(ta.pivothigh(vTsiMuDiTFModTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true

FunTsiMuDi_inRange(cond) =>
	insTsiMuDiBars					= ta.barssince(cond == true)
	vTsiMuDiRangeLower				<= insTsiMuDiBars and insTsiMuDiBars <= vTsiMuDiRangeUpper

//// ───────────────────────
/// ─── Compra regular ───
//// ───────────────────────

/// ─── Osc: Higher Low ───
tsiDiInsOSCHL						= vTsiMuDiTFModTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPLFound, vTsiMuDiTFModTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
/// ─── Price: Lower Low ───
tsiDiInsPRICELL						= low[vTsiMuDiLBR]				< ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)

tsiDiInsBULLCond					= showTsiMuDiPlotDiverg	and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insTsiMuDiPLFound

plot(insTsiMuDiPLFound ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmacion de Compra',
			  linewidth				= 2,
			  color					= tsiDiInsBULLCond ? color.new(colorTsiMuDiDivergLong, 10) : colorTsiMuDiDivergNone)

plotshape(tsiDiInsBULLCond ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Compra',
			  text					= ' Compra ',
			  style					= shape.labelup,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergLong, 10),
			  textcolor				= colorTsiMuDiText)

//// ───────────────────────
/// ─── Compra scalp ───
//// ───────────────────────

/// ─── Osc: Lower Low ───
tsiDiInsOSCLL						= vTsiMuDiTFModTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPLFound, vTsiMuDiTFModTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
/// ─── Price: Higher Low ───
tsiDiInsPRICEHL						= low[vTsiMuDiLBR]				> ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)

tsiDiInsHiddenBullCond				= showTsiMuDiPlotDivergScalp	and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insTsiMuDiPLFound

plot(insTsiMuDiPLFound ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmación de Compra scalp',
			  linewidth				= 2,
			  color					= tsiDiInsHiddenBullCond ? color.new(colorTsiMuDiDivergLong, 40) : colorTsiMuDiDivergNone)

plotshape(tsiDiInsHiddenBullCond ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Compra scalp',
			  text					= ' △ scalp ',
			  style					= shape.labelup,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergLong, 40),
			  textcolor				= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta regular ───
//// ───────────────────────

/// ─── Osc: Lower High ───
tsiDiInsOSCLH						= vTsiMuDiTFModTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPHFound, vTsiMuDiTFModTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
/// ─── Price: Higher High ───
tsiDiInsPRICEHH						= high[vTsiMuDiLBR]				> ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)

tsiDiInsBEARCond					= showTsiMuDiPlotDiverg	and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insTsiMuDiPHFound

plot(insTsiMuDiPHFound ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmación de Venta',
			  linewidth				= 2,
			  color					= tsiDiInsBEARCond ? color.new(colorTsiMuDiDivergShort, 10) : colorTsiMuDiDivergNone)

plotshape(tsiDiInsBEARCond ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Venta',
			  text					= ' Venta ',
			  style					= shape.labeldown,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergShort, 10),
			  textcolor				= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta scalp ───
//// ───────────────────────

/// ─── Osc: Higher High ───
tsiDiInsOSCHH						= vTsiMuDiTFModTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPHFound, vTsiMuDiTFModTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
/// ─── Price: Lower High ───
tsiDiInsPRICELH						= high[vTsiMuDiLBR]				< ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)

tsiDiInsHiddenBearCond				= showTsiMuDiPlotDivergScalp	and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insTsiMuDiPHFound

plot(insTsiMuDiPHFound ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmación de Venta scalp',
			  linewidth				= 2,
			  color					= tsiDiInsHiddenBearCond ? color.new(colorTsiMuDiDivergShort, 40) : colorTsiMuDiDivergNone)

plotshape(tsiDiInsHiddenBearCond ? vTsiMuDiTFModTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Venta scalp',
			  text					= ' ▽ scalp ',
			  style					= shape.labeldown,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergShort, 40),
			  textcolor				= colorTsiMuDiText)

//// ─────────────────────────────────────────────────────────────────────
