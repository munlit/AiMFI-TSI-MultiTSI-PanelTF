/// ╔═══════════════════════════════════╗
/// ║	Globals							║
/// ╚═══════════════════════════════════╝
/// ╔═══════════════════════════════════╗
/// ║	AI Adaptive Money Flow Index	║
/// ╔═══════════════════════════════════╗
/// ║	Tsi & Divergences				║
/// ║	@	Allen.						║
/// ╚═══════════════════════════════════╝

//@version=5
indicator(title							= 'AI Mfi & Multi Tsi & Panel Mtf [🎱 Allen 㔬]',
		  shorttitle					= 'Mfi & MTsi & Panel',
		//   overlay						= false,
		// //   precision					= 2,
		  format						= format.price,
		  precision						= 4
		//   explicit_plot_zorder			= true
		  )

//// ─────────────────────────────────────────────────────────────────────

/// ───────────────────────
/// ─── Colors
/// ───────────────────────

AmeTrBlueFrost							= #E1EEF9
AmeTrGrayNickel							= #F1F1F1
GraySwebSecondaryText					= #77708A
ARoPrimary								= #0035FF
CitiAccentUltraLightBlue				= #E6F7FF
MongoSky10								= #E3FCF7
BrLiYel10								= #FBFD73
BrLiYel30								= #FDF43C
BrLiYel40								= #FEF301
VictSecFucsia50							= #EA1889
PlatziGreen30							= #ADEB42
SurfeGray300							= #C1CACD
SurfeGray400							= #889BA0
SurfeGray450							= #5C818A
SurfeGray500							= #5A6C71
SurfeGray600							= #49575B
SurfeSeaweed100							= #073742
PlatziBlue50							= #24385B
PlatziBlue70							= #121F3D
PlatziBlue80							= #0C1633
UltrRose20								= #FFA3E3
AllenSky10								= #CCF8FF
AllenMint60								= #33FFAC
AllenFucsia50							= #EA1889

//// ─────────────────────────────────────────────────────────────────────

strGlobalExtendTooltip					= "Indicador TSI basado en tendencia"
strGlobalOptionalTooltip				= "Configuración de temporalidad adicional"

/// ───────────────────────
/// ─── Variables
/// ───────────────────────

globalTSIGroupTimeframe					= "Tsi & Divergences"
// globalTSIGroupTimeframe					= "Temporalidad Global"
showTsiMuDiTSIDivergs					= input.bool	(defval = true,			title = 'TSI & Divergences',			group = globalTSIGroupTimeframe)
showTsiMuDiTSITendency					= input.bool	(defval = true,			title = "Tsi de Tendencia",				group = globalTSIGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
showTsiMuDiTSIMultitimeframe			= input.bool	(defval = false,		title = "Tsi Multitimeframe",			group = globalTSIGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
strGlobalMultiTimeFrame					= input.string 	(defval = "Grafico",	title = "Multi Timeframe",				group = globalTSIGroupTimeframe,
			  options					=				["Grafico", "15 min", "30 min", "1 Hora", "2 Horas", "3 Horas", "4 Horas", "1 Dia", "1 Semana", "1 Mes"])
insGlobalTFCoefficient					= 				2

/// ───────────────────────
/// ─── Types
/// ───────────────────────

type globalTypeOHL
	float O								= open
	float H								= high
	float L								= low
	float C								= close
	float V								= volume
	int   I								= bar_index

/// ───────────────────────
/// ─── Functions
/// ───────────────────────

/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		"Grafico"						=> timeframe.period
		"1 seg"							=> "S"	
		"5 seg"							=> "5S"
		"10 seg"						=> "10S"
		"15 seg"						=> "15S"
		"30 seg"						=> "30S"
		"1 min"							=> "1"	
		"3 min"							=> "3"	
		"5 min"							=> "5"
		"15 min"						=> "15"
		"30 min"						=> "30"
		"1 Hora"						=> "60"
		"2 Horas"						=> "120"
		"3 Horas"						=> "180"
		"4 Horas"						=> "240"
		"8 horas"						=> "480"
		"Dia"							=> "D"
		"1 Dia"							=> "1D"
		"Semana"						=> "W"
		"1 Semana"						=> "1W"
		"Mes"							=> "M"
		"1 Mes"							=> "1M"

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		"arriba"						=> "top"
		"medio"							=> "middle"
		"abajo"							=> "bottom"

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		"izquierda"						=> "left"
		"centro"						=> "center"
		"derecha"						=> "right"

/// ─── function position
FunGlobalPosition(_position) =>
	switch _position
		"Externo"						=> "outside"
		"Interno"						=> "inside"

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		"Mini"							=> size.tiny
		"Pequeño"						=> size.small
		"Normal"						=> size.normal
		"Grande"						=> size.large
		"Enorme"						=> size.huge
		"Auto"							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		"NYSE"							=> "UTC-5"
		"New York"						=> "America/New_York"
		"Chicago"						=> "America/Chicago"
		"Londres"						=> "Europe/London"
		"Tokyo"							=> "Asia/Tokyo"
		"Shanghai"						=> "Asia/Shanghai"
		"Sydney"						=> "Australia/Sydney"
		"Argentina"						=> "America/Argentina/Buenos_Aires"


/// ─── function calculate MA
FunGlobalCalculateMA(_source, _length, _type) =>
	switch _type
		"SMA"							=> ta.sma	(_source, _length)
		"HMA"							=> ta.hma	(_source, _length)
		"EMA"							=> ta.ema	(_source, _length)
		"SMMA"							=> ta.rma	(_source, _length)
		"WMA"							=> ta.wma	(_source, _length)
		"VWMA"							=> ta.vwma	(_source, _length)
		"MFI"							=> ta.mfi	(_source, _length)

/// ─── Function calculate timeframe range
FunGlobalCalculateTimeframeRange(_coefficient, _timeframe) =>
	_x									= 3
	_mayor								= 480
	_minor								= 15
	_tonumber							= str.tonumber(_timeframe)
	_operat_coeff						= _tonumber * _coefficient
	_operat_minor						= _tonumber * _x
	_toresult							= str.tonumber(_timeframe)
	_conditional						= _tonumber >= _mayor ? _toresult : _tonumber <= _minor ? _operat_minor : _operat_coeff
	str.tostring(_conditional)

/// ─── function Signal buy/sell
FunGlobalSignal(_buy, _sell) =>
	_buy ? "🟢⬈" : _sell ? "🔴⬊" : "⚪➞"

/// ─── function Color buy/sell
FunGlobalIfColor(_buy, _sell) =>
	_buy ? _colorbuy : _sell ? _colorsell : _colorneutral

/// ───────────────────────
/// ─── Instances
/// ───────────────────────

globalOHL								= globalTypeOHL.new()

/// Instance function timeframe
// FunGlobalTimeFrame(strGlobalTimeFrame)

//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║	AI Adaptative MFI				║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

adapMonToolAdj							= "Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos"

adapMonGrpSet							= "Adaptative MFI"
adapMonGrpLim							= "Clustering Setting"
adapMonGrpApar							= "Apariencia"

//// ───────────────────────
/// ─── Adaptive MFI
/// ─── Vars ─────────
//// ───────────────────────

showadapMonGroup						= input.bool	(defval = true,				title = 'Mostrar Ai Adaptative MFI',						group = adapMonGrpSet)

adapMonVarADJ							= input.bool	(defval = true,				title = "Usar MFI ajustado",								group = adapMonGrpApar,		tooltip = adapMonToolAdj)
adapMonColorLong						= input.color	(AllenMint60,				title = "Rango:     Compra",								group = adapMonGrpApar,		inline = "mfi colors")
adapMonColorShort						= input.color	(AllenSky10,				title = "Venta",											group = adapMonGrpApar,		inline = "mfi colors")
adapMonColorAux							= input.color	(CitiAccentUltraLightBlue,	title = "Auxiliares",										group = adapMonGrpApar)
adapMonColorDark						= 				SurfeGray600

adapMonVarSRC							= input.source	(defval = hlc3,				title = "Fuente MFI",										group = adapMonGrpSet)
adapMonVarLENGTH						= input.int		(defval = 14,				title = "Longitud MFI",							minval = 1,	group = adapMonGrpSet)
adapMonVarDataLength					= input.int		(defval = 300,				title = "Tamaño de datos de entrenamiento",		minval = 1,	group = adapMonGrpLim)
adapMonVarIterations					= input.int		(defval = 5,				title = "Cantidad de iteraciones por barra",	minval = 1,	group = adapMonGrpLim)
adapMonVarOverbought					= input.float	(defval = 80.0,				title = "Inicio de Sobre Compra",							group = adapMonGrpLim)
adapMonVarNeutral						= input.float	(defval = 50.0,				title = "Neutral",											group = adapMonGrpLim)
adapMonVarOversold						= input.float	(defval = 20.0,				title = "Inicio de Sobre Venta",							group = adapMonGrpLim)

adapMonVaExAA							= adapMonVarOverbought
adapMonVaExBB							= adapMonVarNeutral
adapMonVaExCC							= adapMonVarOversold

//// ───────────────────────
/// ─── Adaptive MFI
/// ─── Functions ────
//// ───────────────────────

adapMonVarOSC							= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB						= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE						= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS						= array.new_float(1, adapMonVarOversold)

if nz(adapMonVarOSC) > 0
	for j = adapMonVarIterations to 1

		adapMonArrOB.clear()
		adapMonArrNE.clear()
		adapMonArrOS.clear()

		for i = adapMonVarDataLength to 0

			if math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrNE.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExBB) and math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrOB.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExBB)
				adapMonArrOS.push(adapMonVarOSC[i])
		
		adapMonVaExAA					:= array.avg(adapMonArrOB)
		adapMonVaExBB					:= array.avg(adapMonArrNE)
		adapMonVaExCC					:= array.avg(adapMonArrOS)

adapMonArrNE_NEW						= array.avg(adapMonArrNE)
adapMonArrOB_NEW						= array.avg(adapMonArrOB)
adapMonArrOS_NEW						= array.avg(adapMonArrOS)

positionBetweenBands					= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL							= adapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncST							= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

adapMonIfCOLOR100						= adapMonVarOSC > adapMonArrNE_NEW		? color.new(adapMonColorLong, 90)		: color.new(adapMonColorShort, 90)
adapMonIfCOLOR0							= adapMonVarOSC > adapMonArrNE_NEW		? color.new(adapMonColorLong, 0)		: color.new(adapMonColorShort, 0)

//// ───────────────────────
/// ─── Adaptive MFI
/// ─── Display ──────
//// ───────────────────────

adapMonPlotMAIN							= plot	(showadapMonGroup ? adapMonIfVAL : na,											color = adapMonIfCOLOR100)
adapMonPlotMID							= plot	(showadapMonGroup and adapMonVarADJ ? adapMonVarNeutral : adapMonArrNE_NEW,		color = adapMonIfCOLOR100)

/// ─── plot marcas de sobrecompra y sobreventa
plot									(showadapMonGroup ? adapMonVarADJ ? 110 : adapMonArrOB_NEW : na,						color =  color.from_gradient(adapMonVarOSC, adapMonArrNE_NEW, adapMonVarADJ ? 100 : adapMonArrOB_NEW, color.new(adapMonColorDark, 70), color.new(adapMonColorShort, 0)), linewidth = 6)
plot									(showadapMonGroup ? adapMonVarADJ ? -10 : adapMonArrOS_NEW : na,						color = color.from_gradient(adapMonVarOSC, adapMonVarADJ ? 0 : adapMonArrOS_NEW, adapMonArrNE_NEW, color.new(adapMonColorLong, 0), color.new(adapMonColorDark, 70)), linewidth = 6)

/// ─── fill areas de tendencia
fill									(adapMonPlotMID, adapMonPlotMAIN,														color = adapMonIfCOLOR100, title = "Area de Tendencia")
fill									(adapMonPlotMID, adapMonPlotMAIN, adapMonIfVAL, adapMonVarADJ ? 50 : adapMonArrNE_NEW,	color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

/// ─── Colors ───
colorTsiMuDiBaseLong					= PlatziGreen30
colorTsiMuDiBaseShort					= VictSecFucsia50

colorTsiMuDiTendency					= AmeTrBlueFrost
colorTsiMuDiMultitimeframe				= AmeTrBlueFrost

colorTsiMuDiDivergLong					= AllenMint60
colorTsiMuDiDivergShort					= AllenSky10
colorTsiMuDiDivergNone					= color.new(PlatziBlue80,		100)

colorTsiMuDiText						= color.new(PlatziBlue70,		0)
colorTsiMuDiTSI							= color.new(AllenSky10,			20)

/// ─── Inputs ───
groupTsiMuDiTSIVars						= 'TSI & Divergences'
vTsiMuDiLong							= input.int		(defval = 6,		title = 'Longitud de Compra',			group = globalTSIGroupTimeframe)
vTsiMuDiShort							= input.int		(defval = 13,		title = 'Longitud de Venta',			group = globalTSIGroupTimeframe)
vTsiMuDiSignal							= input.int		(defval = 5,		title = 'Longitud de Señal',			group = globalTSIGroupTimeframe)

/// ─── divergences ───
vTsiMuDiLBR								= 5									//	Corrección a la derecha
vTsiMuDiLBL								= 5									//	Corrección a la izquierda
vTsiMuDiRangeUpper						= 30								//	Rango de corrección maximo
vTsiMuDiRangeLower						= 2									//	Rango de corrección minimo
/// ─── Show ───
showTsiMuDiPlotDiverg					= input.bool	(defval = true,		title = 'Divergencias',					group = globalTSIGroupTimeframe,		inline = "diverg show")
showTsiMuDiPlotDivergScalp				= input.bool	(defval = true,		title = 'Scalp',						group = globalTSIGroupTimeframe,		inline = "diverg show")
showTsiMuDiCloudOn						= input.bool	(defval = true,		title = 'TSI Cloud',					group = globalTSIGroupTimeframe)

vTsiMuDiSource							= globalOHL.C[0]

//// ───────────────────────
/// ─── Functions ───
//// ───────────────────────

/// function tendency (smooth & tsi calculate)
FunTsiMuDiCalculateTendencyTSI(_source, _long, _short) =>
	_change								= ta.change(_source)
	_smooth_single						= ta.ema(_change, _long)
	_smooth_double						= ta.ema(_smooth_single, _short)
	_x									= 50
	_plus								= 50
	_smooth								= _smooth_double
	_smooth_abs							= math.abs(_smooth_double)
	_x * (_smooth / _smooth_abs) + _plus

//// ───────────────────────

/// function calculate TSI
FunTsiMuDiCalculateDoubleSmooth(_source, _long, _short) =>
	fist_smooth							= ta.ema(_source, _long)
	ta.ema(fist_smooth, _short)

FunTsiMuDiCalculateTSI(_source, _long, _short) =>
	_change								= ta.change(_source)
	_x									= 125
	_plus								= 50
	_smooth								= FunTsiMuDiCalculateDoubleSmooth(_change, _long, _short)
	_smooth_abs							= FunTsiMuDiCalculateDoubleSmooth(math.abs(_change), _long, _short)
	_x * (_smooth / _smooth_abs) + _plus

//// ───────────────────────
/// ─── Instances ───
//// ───────────────────────

/// Multitimeframe
/// instance function calculate multitimeframe Tsi
iTsiMuDiCalculateMultiTfTSI				= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
iTsiMuDiCalculateMultiTfEMA				= ta.ema(iTsiMuDiCalculateMultiTfTSI, vTsiMuDiSignal)

/// instance function global timeframe
iTsiMuDiCalculateMultiTfTSIRange		= FunGlobalCalculateTimeframeRange(insGlobalTFCoefficient, FunGlobalTimeFrame(strGlobalMultiTimeFrame))

/// ─── Timeframe multitimeframe Tsi
arrTsiMuDiMultiTimeframeTicker			= request.security(syminfo.tickerid,	iTsiMuDiCalculateMultiTfTSIRange,	iTsiMuDiCalculateMultiTfTSI,	barmerge.gaps_on)

/// ─── plot color
insTsiMuDiMultiTimefPlotColor			= iTsiMuDiCalculateMultiTfTSI	> iTsiMuDiCalculateMultiTfEMA	? colorTsiMuDiBaseLong	: iTsiMuDiCalculateMultiTfTSI	<= iTsiMuDiCalculateMultiTfEMA	? colorTsiMuDiBaseShort	: na

/// Tendency
/// instances function calculate tendency  Tsi
iTsiMuDiCalculateTendencyTSI			= FunTsiMuDiCalculateTendencyTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
iTsiMuDiCalculateTendencyEma			= ta.ema(iTsiMuDiCalculateTendencyTSI, vTsiMuDiSignal)

/// fill color tendency
insTsiMuDiCloudTendencyColor			= iTsiMuDiCalculateTendencyTSI	> iTsiMuDiCalculateTendencyEma	? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTendencyTSI	<= iTsiMuDiCalculateTendencyEma	? colorTsiMuDiBaseShort		: na

/// PRESENT
/// instance function calculate present Tsi
iTsiMuDiCalculateTSI					= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
iTsiMuDiCalculateEma					= ta.ema(iTsiMuDiCalculateTSI, vTsiMuDiSignal)

/// ─── plot color
insTsiMuDiPlotColor						= iTsiMuDiCalculateTSI			> iTsiMuDiCalculateEma			? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTSI			<= iTsiMuDiCalculateEma			? colorTsiMuDiBaseShort	: na
/// ─── fill cloud color
insTsiMuDiCloudColor					= iTsiMuDiCalculateTSI			> iTsiMuDiCalculateEma			? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTSI			<= iTsiMuDiCalculateEma			? colorTsiMuDiBaseShort	: na

//// ───────────────────────
/// ─── Display ───
//// ───────────────────────

/// ─── Plot

 /// plot multi timeframe
insTsiMuDiMultitimefTsiPlotLine			= plot(showTsiMuDiTSIMultitimeframe	? arrTsiMuDiMultiTimeframeTicker : na,							color = color.new(colorTsiMuDiMultitimeframe, 40),		linewidth = 2)
insTsiMuDiMultitimefEmaPlotLine			= plot(showTsiMuDiTSIMultitimeframe	? ta.ema(arrTsiMuDiMultiTimeframeTicker, vTsiMuDiSignal) : na,	color = color.new(colorTsiMuDiMultitimeframe, 50),		linewidth = 1)
/// fill multi timeframe
// fill(insTsiMuDiMultitimefTsiPlotLine, insTsiMuDiMultitimefEmaPlotLine,																	color = color.new(AmeTrBlueFrost, 70))

/// plot tendency TSI
insTsiMuDiTendencyTsiPlotLine			= plot(showTsiMuDiTSITendency ? iTsiMuDiCalculateTendencyTSI : na,									color = color.new(colorTsiMuDiTendency, 77),			linewidth = 2)
insTsiMuDiTendencyEmaPlotLine			= plot(showTsiMuDiTSITendency ? ta.ema(iTsiMuDiCalculateTendencyTSI,	vTsiMuDiSignal) : na,		color = color.new(colorTsiMuDiTendency, 77),			linewidth = 2)

/// fill tendency
fill(insTsiMuDiTendencyTsiPlotLine, insTsiMuDiTendencyEmaPlotLine,																		color = color.new(insTsiMuDiCloudTendencyColor, 85))

/// plot present TSI
plot(showTsiMuDiTSIDivergs				? iTsiMuDiCalculateTSI	: na,																		color = color.new(PlatziBlue70, 60),					linewidth = 6)		//	plot TSI blue
plot(showTsiMuDiTSIDivergs				? ta.ema(iTsiMuDiCalculateTSI,	vTsiMuDiSignal)	: na,												color = color.new(PlatziBlue70, 60),					linewidth = 6)		//	plot EMA blue
insTsiMuDiTsiPlotLine					= plot(showTsiMuDiTSIDivergs ? iTsiMuDiCalculateTSI	: na,											color = color.new(insTsiMuDiPlotColor, 30),				linewidth = 2)		//	plot TsiSI
insTsiMuDiEmaPlotLine					= plot(showTsiMuDiTSIDivergs ? ta.ema(iTsiMuDiCalculateTSI,	vTsiMuDiSignal)	: na,					color = color.new(insTsiMuDiPlotColor, 30),				linewidth = 2)		//	plot EMA

/// fill present
fill(insTsiMuDiTsiPlotLine, insTsiMuDiEmaPlotLine,																						color = showTsiMuDiCloudOn ? color.new(insTsiMuDiCloudColor, 70) : na)						//	fill

//// ───────────────────────
/// ─── Divergences ───
//// ───────────────────────

insTsiMuDiPLFound						= na(ta.pivotlow(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true
insTsiMuDiPHFound						= na(ta.pivothigh(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true

FunTsiMuDi_inRange(cond) =>
	insTsiMuDiBars						= ta.barssince(cond == true)
	vTsiMuDiRangeLower					<= insTsiMuDiBars and insTsiMuDiBars <= vTsiMuDiRangeUpper

//// ───────────────────────
/// ─── Compra regular ───
//// ───────────────────────

/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICELL							= low[vTsiMuDiLBR]					< ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)
tsiDiInsBULLCond						= showTsiMuDiPlotDiverg				and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insTsiMuDiPLFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPLFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmacion de Compra',
			  linewidth					= 2,
			  color						= tsiDiInsBULLCond ? color.new(colorTsiMuDiDivergLong, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and	tsiDiInsBULLCond				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Compra',
			  text						= ' Compra ',
			  style						= shape.labelup,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergLong, 10),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Compra scalp ───
//// ───────────────────────

/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICEHL							= low[vTsiMuDiLBR]					> ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)
tsiDiInsHiddenBullCond					= showTsiMuDiPlotDivergScalp		and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insTsiMuDiPLFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPLFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmación de Compra scalp',
			  linewidth					= 2,
			  color						= tsiDiInsHiddenBullCond ? color.new(colorTsiMuDiDivergLong, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsHiddenBullCond			? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Compra scalp',
			  text						= ' △ scalp ',
			  style						= shape.labelup,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergLong, 40),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta regular ───
//// ───────────────────────

/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICEHH							= high[vTsiMuDiLBR]					> ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsBEARCond						= showTsiMuDiPlotDiverg				and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insTsiMuDiPHFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPHFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmación de Venta',
			  linewidth					= 2,
			  color						= tsiDiInsBEARCond ? color.new(colorTsiMuDiDivergShort, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsBEARCond				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Venta',
			  text						= ' Venta ',
			  style						= shape.labeldown,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergShort, 10),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta scalp ───
//// ───────────────────────

/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICELH							= high[vTsiMuDiLBR]					< ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsHiddenBearCond					= showTsiMuDiPlotDivergScalp		and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insTsiMuDiPHFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPHFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmación de Venta scalp',
			  linewidth					= 2,
			  color						= tsiDiInsHiddenBearCond ? color.new(colorTsiMuDiDivergShort, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsHiddenBearCond			? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Venta scalp',
			  text						= ' ▽ scalp ',
			  style						= shape.labeldown,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergShort, 40),
			  textcolor					= colorTsiMuDiText)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════════╗
/// ║	TSI Panel Multi Timeframe			║
/// ║	@	Allen.							║
/// ╚═══════════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── TSI Obs MTF ───
/// ─── TSI Box ───
//// ───────────────────────

colorTsiObsPnl_Buy						= PlatziGreen30
colorTsiObsPnl_Sell						= AllenFucsia50
colorTsiObsPnl_Neutral					= AmeTrBlueFrost
colorTsiObsPnl_White					= MongoSky10
colorTsiObsPnl_Black					= PlatziBlue70
colorTsiObsPnl_Text						= PlatziBlue70
colorTsiObsPnl_TiPnTx					= PlatziBlue70
colorTsiObsPnl_TiPnBg					= BrLiYel30

/// ─── Inputs
tsiObsPnlGroupTimeframes				=				"Timeframe Panel"
showTsiObsPnlTimeframesPanel			= input.bool	(true,				title = "Panel TSI",			group = tsiObsPnlGroupTimeframes)
showTsiObsPnlTF15m						= input.bool	(true,				title = "15m  ",				group = tsiObsPnlGroupTimeframes,		inline = "timefr")
showTsiObsPnlTF30m						= input.bool	(true,				title = "30m  ",				group = tsiObsPnlGroupTimeframes,		inline = "timefr")
showTsiObsPnlTF1h						= input.bool	(true,				title = "1 H  ",				group = tsiObsPnlGroupTimeframes,		inline = "timefr")
showTsiObsPnlTF2h						= input.bool	(true,				title = "2 H   ",				group = tsiObsPnlGroupTimeframes,		inline = "timefr2")
showTsiObsPnlTF3h						= input.bool	(true,				title = "3 H   ",				group = tsiObsPnlGroupTimeframes,		inline = "timefr2")
showTsiObsPnlTF4h						= input.bool	(true,				title = "4 H  ",				group = tsiObsPnlGroupTimeframes,		inline = "timefr2")

tsiObsPnlGroupSignal					=				"Signal Panel"
showTsiObsPnlSignalPanel				= input.bool	(true,				title = "Panel TSI Signal",		group = tsiObsPnlGroupSignal)
showTsiObsPnlSignalTsi					= input.bool	(true,				title = "Tsi  ",				group = tsiObsPnlGroupSignal,			inline = "signal")
showTsiObsPnlSignalMtf					= input.bool	(true,				title = "Mtf  ",				group = tsiObsPnlGroupSignal,			inline = "signal")
showTsiObsPnlSignalRsi					= input.bool	(true,				title = "Rsi  ",				group = tsiObsPnlGroupSignal,			inline = "signal")
showTsiObsPnlSignalMfi					= input.bool	(true,				title = "Mfi  ",				group = tsiObsPnlGroupSignal,			inline = "signal")

tsiObsPnl_PosiVert						= input.string	(defval = "arriba",	title = " Y: ",					group = tsiObsPnlGroupTimeframes,		inline = "ubic",
		  options						=				["arriba", "medio","abajo"])
tsiObsPnl_PosiHoriz						= input.string	(defval = "centro",	title = " X: ",					group = tsiObsPnlGroupTimeframes,		inline = "ubic",
		  options						=				["izquierda", "centro","derecha"])

tsiObsPnl_LocatSignalHoriz				= input.string	(defval = "derecha",title = "Ubicación",			group = tsiObsPnlGroupSignal,
		  options						=				["izquierda", "derecha"])

stTsiObsPnl_TextSize					= input.string	(defval = "normal",	title = "Tamaño de texto",
		  options						= ["auto","tiny","small","normal","large","huge"])

vTsiObsPnl_RsiLength					= 14

/// ───────────────────────
/// ─── Types
/// ───────────────────────

/// ───────────────────────
/// ─── Functions
/// ───────────────────────
/// ─── RSI
tsiObsPnlRSI							= ta.rsi(globalOHL.C, vTsiObsPnl_RsiLength)

/// ─── TSI invoke
tsiObsPnlTSI							= iTsiMuDiCalculateMultiTfTSI
tsiObsPnlMTFRange						= FunGlobalCalculateTimeframeRange(insGlobalTFCoefficient, timeframe.period)
tsiDbsPnlEma							= iTsiMuDiCalculateMultiTfEMA
tsiDbsPnlMFI							= adapMonVarOSC

/// instance function global timeframe
iTsiObsPnlCalcSignal					= timeframe.period

/// ─── TSI timeframes
vTsiObsPnlTF15m							= request.security(syminfo.tickerid,		"15",		tsiObsPnlTSI)
vTsiObsPnlTF30m							= request.security(syminfo.tickerid,		"30",		tsiObsPnlTSI)
vTsiObsPnlTF1h							= request.security(syminfo.tickerid,		"60",		tsiObsPnlTSI)
vTsiObsPnlTF2h							= request.security(syminfo.tickerid,		"120",		tsiObsPnlTSI)
vTsiObsPnlTF3h							= request.security(syminfo.tickerid,		"180",		tsiObsPnlTSI)
vTsiObsPnlTF4h							= request.security(syminfo.tickerid,		"240",		tsiObsPnlTSI)

/// ─── TSI timeframes signal
[vTsiObsPnlTFSignalTsi,	vTsiObsPnlTFSignalTsi_1,	vTsiObsPnlTFSignalTsi_2]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalMtf,	vTsiObsPnlTFSignalMtf_1,	vTsiObsPnlTFSignalMtf_2]	= request.security(syminfo.tickerid,	tsiObsPnlMTFRange,		[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalRsi,	vTsiObsPnlTFSignalRsi_1,	vTsiObsPnlTFSignalRsi_2]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiObsPnlRSI,	tsiObsPnlRSI[1],	tsiObsPnlRSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalMfi,	vTsiObsPnlTFSignalMfi_1,	vTsiObsPnlTFSignalMfi_2]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiDbsPnlMFI,	tsiDbsPnlMFI[1],	tsiDbsPnlMFI[2]],	lookahead = barmerge.lookahead_on)

/// ─── New table
var vTsiPnlNewTable						= table.new(
	  position							= FunGlobalVertical(tsiObsPnl_PosiVert) + "_" + FunGlobalHorizontal(tsiObsPnl_PosiHoriz),
	  columns							= 8,
	  rows								= 1,
	  border_width						= 2,
	  frame_color						= color.new(colorTsiObsPnl_Black, 15),
	  force_overlay						= true)

/// ─── New table signal
var vTsiPnlNewTableSignal				= table.new(
		  position						= "middle_right",
		  columns						= 1,
		  rows							= 5,
		  border_width					= 2,
		  frame_color					= color.new(colorTsiObsPnl_Black, 15))

/// ─── Function table cells
FunTsiObsPnlCalculateCell(_col, _row, _timeframe, _value) =>
	_cell_color							= _value >= 100 ? colorTsiObsPnl_Sell : _value <= 0 ? colorTsiObsPnl_Buy : colorTsiObsPnl_Neutral
	_opacity							= _value >= 100 or _value <= 0 ? 20 : _value >= 85 or _value <= 15 ? 40 : 65
	_cell_text							= _timeframe + "\n" + str.tostring(_value, "#.00")
	_txtsize							= stTsiObsPnl_TextSize

	table.cell				(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor			= color.new(_cell_color, _opacity),
		  text_size			= _txtsize,
		  text_color		= colorTsiObsPnl_Text,
		  width				= 6)

/// ─── Function table name
FunTsiObsPnlCalculateCellNow(_col, _row) =>
	_cell_text							= "TSI"

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(colorTsiObsPnl_TiPnBg, 10),
  		  text_size						= stTsiObsPnl_TextSize,
		  text_color					= color.new(colorTsiObsPnl_TiPnTx, 10),
		  width							= 3)

/// ─── Function table signal
FunTsiObsPnlCalculateCellSignal(_col, _row, _timeframe, _value) =>
	_cell_color							= _value >= 100 ? colorTsiObsPnl_Sell : _value <= 0 ? colorTsiObsPnl_Buy : colorTsiObsPnl_Neutral
	_opacity							= _value >= 100 or _value <= 0 ? 20 : _value >= 85 or _value <= 15 ? 40 : 65
	_cell_text							= _timeframe + "\n" + str.tostring(_value, "#.00")

	table.cell							(vTsiPnlNewTableSignal, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color, _opacity),
		  text_size						= stTsiObsPnl_TextSize,
		  text_color					= colorTsiObsPnl_Text,
		  width							= 6)

// /// ─── Function signal buy/sell
// FunTsiObsPnlCalculateSignalBuySell(_col, _row, _timeframe, _value) =>
// 	_cell_color							= _value >= 100 ? colorTsiObsPnl_Sell : _value <= 0 ? colorTsiObsPnl_Buy : colorTsiObsPnl_Neutral

// 	_opacity							= _value >= 100 or _value <= 0 ? 20 : _value >= 85 or _value <= 15 ? 40 : 65

// 	_cell_text							= _timeframe + "\n" + str.tostring(_value, "#.00")

// 	ifRsiOvOvLongTF						= rsiOvORSI[1]	< rsiOvORSI[3]		and rsiOvORSI[2]	< rsiOvORSI[4]		and rsiOvORSI	< 30 
// 	ifRsiOvOvShortTF					= rsiOvORSI[1]	> rsiOvORSI[3]		and rsiOvORSI[2]	> rsiOvORSI[4]		and rsiOvORSI	> 70

// FunGlobalSignal(_buy, _sell) =>
// FunGlobalIfColor(_buy, _sell) =>

/// ───────────────────────
/// ─── Visual
/// ───────────────────────

/// ─── Table TSI
if showTsiObsPnlTimeframesPanel
	FunTsiObsPnlCalculateCellNow		(0,	0)
	FunTsiObsPnlCalculateCell			(1,	0,		"Actual",	tsiObsPnlTSI)

	if showTsiObsPnlTF15m
		FunTsiObsPnlCalculateCell		(2,	0,		"15m",		vTsiObsPnlTF15m)
	if showTsiObsPnlTF30m
		FunTsiObsPnlCalculateCell		(3,	0,		"30m",		vTsiObsPnlTF30m)
	if showTsiObsPnlTF1h
		FunTsiObsPnlCalculateCell		(4,	0,		"1 H",		vTsiObsPnlTF1h)
	if showTsiObsPnlTF2h
		FunTsiObsPnlCalculateCell		(5,	0,		"2 H",		vTsiObsPnlTF2h)
	if showTsiObsPnlTF3h
		FunTsiObsPnlCalculateCell		(6,	0,		"3 H",		vTsiObsPnlTF3h)
	if showTsiObsPnlTF4h
		FunTsiObsPnlCalculateCell		(7,	0,		"4 H",		vTsiObsPnlTF4h)

/// ─── Table Signal
if showTsiObsPnlSignalPanel
	if showTsiObsPnlSignalTsi
		FunTsiObsPnlCalculateCellSignal		(0,	0,		"Tsi",		vTsiObsPnlTFSignalTsi)
	if showTsiObsPnlSignalMtf
		FunTsiObsPnlCalculateCellSignal		(0,	1,		"Mtf",		vTsiObsPnlTFSignalMtf)
	if showTsiObsPnlSignalRsi
		FunTsiObsPnlCalculateCellSignal		(0,	2,		"Rsi",		vTsiObsPnlTFSignalRsi)
	if showTsiObsPnlSignalMfi
		FunTsiObsPnlCalculateCellSignal		(0,	3,		"Mfi",		vTsiObsPnlTFSignalMfi)

//// ─────────────────────────────────────────────────────────────────────
