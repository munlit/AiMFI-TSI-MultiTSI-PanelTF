/// ╔═══════════════════════════════════╗
/// ║	Globals							║
/// ╚═══════════════════════════════════╝
/// ╔═══════════════════════════════════╗
/// ║	AI Adaptive Money Flow Index	║
/// ╔═══════════════════════════════════╗
/// ║	Tsi & Divergences				║
/// ║	@	Allen.						║
/// ╚═══════════════════════════════════╝

//@version=5
indicator(title							= 'AI Mfi & Multi Tsi & Panel Mtf [🎱 Allen 㔬]',
		  shorttitle					= 'Mfi & MTsi & Panel',
		//   overlay						= false,
		// //   precision					= 2,
		  format						= format.price,
		  precision						= 4
		//   explicit_plot_zorder			= true
		  )

//// ─────────────────────────────────────────────────────────────────────

/// ───────────────────────
/// ─── Colors
/// ───────────────────────

AmeTrBlueFrost							= #E1EEF9
AmeTrGrayNickel							= #F1F1F1
GraySwebSecondaryText					= #77708A
ARoPrimary								= #0035FF
CitiAccentUltraLightBlue				= #E6F7FF
MongoSky10								= #E3FCF7
BrLiYel10								= #FBFD73
BrLiYel40								= #FEF301
VictSecFucsia50							= #EA1889
PlatziGreen30							= #ADEB42
PlatziBlue50							= #24385B
PlatziBlue70							= #121F3D
PlatziBlue80							= #0C1633
UltrRose20								= #FFA3E3
AllenSky10								= #CCF8FF
AllenMint60								= #33FFAC
AllenFucsia50							= #EA1889

//// ─────────────────────────────────────────────────────────────────────

strGlobalExtendTooltip					= "Indicador TSI basado en tendencia"
strGlobalOptionalTooltip				= "Configuración de temporalidad adicional"

/// ───────────────────────
/// ─── Variables
/// ───────────────────────

globalTSIGroupTimeframe					= "Tsi & Divergences"
// globalTSIGroupTimeframe					= "Temporalidad Global"
showTsiMuDiTSIDivergs					= input.bool	(defval = true,			title = 'TSI & Divergences',			group = globalTSIGroupTimeframe)
showTsiMuDiTSIExtend					= input.bool	(defval = true,			title = "Tsi Extend",					group = globalTSIGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
showTsiMuDiTSIOptionalTF				= input.bool	(defval = false,		title = "Tsi Opcional",					group = globalTSIGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
strGlobalOptionalTimeFrame				= input.string 	(defval = "2 Horas",	title = "Timeframe opcional",			group = globalTSIGroupTimeframe,
			  options					=				["15 min", "30 min", "1 Hora", "2 Horas", "3 Horas", "4 Horas", "1 Dia", "1 Semana", "1 Mes"])
insGlobalTFCoefficient					= input.int		(defval = 2,			title = "Coeficiente timeframe",		group = globalTSIGroupTimeframe,		minval = 1,	maxval = 5,	step = 1)

/// ───────────────────────
/// ─── Types
/// ───────────────────────

type globalTypeOHL
	float O								= open
	float H								= high
	float L								= low
	float C								= close
	float V								= volume
	int   I								= bar_index

/// ───────────────────────
/// ─── Functions
/// ───────────────────────

/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		"Grafico"						=> timeframe.period
		"1 seg"							=> "S"	
		"5 seg"							=> "5S"
		"10 seg"						=> "10S"
		"15 seg"						=> "15S"
		"30 seg"						=> "30S"
		"1 min"							=> "1"	
		"3 min"							=> "3"	
		"5 min"							=> "5"
		"15 min"						=> "15"
		"30 min"						=> "30"
		"1 Hora"						=> "60"
		"2 Horas"						=> "120"
		"3 Horas"						=> "180"
		"4 Horas"						=> "240"
		"8 horas"						=> "480"
		"1 Dia"							=> "D"
		"1 Dia"							=> "1D"
		"1 Semana"						=> "W"
		"1 Semana"						=> "1W"
		"1 Mes"							=> "M"
		"1 Mes"							=> "1M"

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		"arriba"						=> "top"
		"medio"							=> "middle"
		"abajo"							=> "bottom"

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		"izquierda"						=> "left"
		"centro"						=> "center"
		"derecha"						=> "right"

/// ─── function position
FunGlobalPosition(_position) =>
	switch _position
		"Externo"						=> "outside"
		"Interno"						=> "inside"

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		"Mini"							=> size.tiny
		"Pequeño"						=> size.small
		"Normal"						=> size.normal
		"Grande"						=> size.large
		"Enorme"						=> size.huge
		"Auto"							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		"NYSE"							=> "UTC-5"
		"New York"						=> "America/New_York"
		"Chicago"						=> "America/Chicago"
		"Londres"						=> "Europe/London"
		"Tokyo"							=> "Asia/Tokyo"
		"Shanghai"						=> "Asia/Shanghai"
		"Sydney"						=> "Australia/Sydney"
		"Argentina"						=> "America/Argentina/Buenos_Aires"


/// ─── function calculate MA
FunGlobalCalculateMA(_source, _length, _type) =>
	switch _type
		"SMA"							=> ta.sma	(_source, _length)
		"HMA"							=> ta.hma	(_source, _length)
		"EMA"							=> ta.ema	(_source, _length)
		"SMMA"							=> ta.rma	(_source, _length)
		"WMA"							=> ta.wma	(_source, _length)
		"VWMA"							=> ta.vwma	(_source, _length)
		"MFI"							=> ta.mfi	(_source, _length)

/// ─── Function calculate timeframe range
FunGlobalCalculateTimeframeRange(_coefficient, _timeframe) =>
	_x									= 3
	_mayor								= 500
	_minor								= 15
	_tonumber							= str.tonumber(_timeframe)
	_operat_coeff						= _tonumber * _coefficient
	_operat_minor						= _tonumber * _x
	// _if_mayor							= _tonumber > _mayor ? _tonumber : _if_minor
	// _if_minor							= _tonumber <= _minor ? _operat_minor : _operat_coeff
	_conditional						= _tonumber > _mayor ? _tonumber <= _minor ? _operat_minor : _operat_coeff : _tonumber
	// _tostring							= str.tostring(_conditional)
	str.tostring(_conditional)
	// str.tostring(_conditional)

/// ───────────────────────
/// ─── Instances
/// ───────────────────────

globalOHL								= globalTypeOHL.new()

/// Instance function timeframe
// FunGlobalTimeFrame(strGlobalTimeFrame)

//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║	AI Adaptative MFI				║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

adapMonToolAdj							= "Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos"
adapMonToolMlt							= "Aumente esto para que los números de clasificación aparezcan más lejos del gráfico del oscilador"

adapMonGrpSet							= "Adaptative MFI"
adapMonGrpLim							= "Clustering Setting"
adapMonGrpApar							= "Apariencia"

//// ───────────────────────
/// ─── Adaptive MFI
/// ─── Vars ─────────
//// ───────────────────────

showadapMonGroup						= input.bool	(defval = true,				title = 'Mostrar Ai Adaptative MFI',						group = adapMonGrpSet)

adapMonVarADJ							= input.bool	(defval = true,				title = "Usar MFI ajustado",								group = adapMonGrpApar,		tooltip = adapMonToolAdj)
adapMonVarMLT							= input.float	(defval = 1.0,				title = "Multiplicador",									group = adapMonGrpApar,		tooltip = adapMonToolMlt)
adapMonColorLong						= input.color	(AllenMint60,				title = "Rango:     Compra",								group = adapMonGrpApar,		inline = "mfi colors")
adapMonColorShort						= input.color	(AllenSky10,				title = "Venta",											group = adapMonGrpApar,		inline = "mfi colors")
adapMonColorAux							= input.color	(CitiAccentUltraLightBlue,	title = "Auxiliares",										group = adapMonGrpApar)

adapMonVarSRC							= input.source	(defval = hlc3,				title = "Fuente MFI",										group = adapMonGrpSet)
adapMonVarLENGTH						= input.int		(defval = 14,				title = "Longitud MFI",							minval = 1,	group = adapMonGrpSet)
adapMonVarDataLength					= input.int		(defval = 300,				title = "Tamaño de datos de entrenamiento",		minval = 1,	group = adapMonGrpLim)
adapMonVarIterations					= input.int		(defval = 5,				title = "Cantidad de iteraciones por barra",	minval = 1,	group = adapMonGrpLim)
adapMonVarOverbought					= input.float	(defval = 80.0,				title = "Inicio de Sobre Compra",							group = adapMonGrpLim)
adapMonVarNeutral						= input.float	(defval = 50.0,				title = "Neutral",											group = adapMonGrpLim)
adapMonVarOversold						= input.float	(defval = 20.0,				title = "Inicio de Sobre Venta",							group = adapMonGrpLim)

adapMonVaExAA							= adapMonVarOverbought
adapMonVaExBB							= adapMonVarNeutral
adapMonVaExCC							= adapMonVarOversold

//// ───────────────────────
/// ─── Adaptive MFI
/// ─── Functions ────
//// ───────────────────────

adapMonVarOSC				= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB			= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE			= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS			= array.new_float(1, adapMonVarOversold)

if nz(adapMonVarOSC) > 0
	for j = adapMonVarIterations to 1

		adapMonArrOB.clear()
		adapMonArrNE.clear()
		adapMonArrOS.clear()

		for i = adapMonVarDataLength to 0

			if math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrNE.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExBB) and math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrOB.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExBB)
				adapMonArrOS.push(adapMonVarOSC[i])
		
		adapMonVaExAA		:= array.avg(adapMonArrOB)
		adapMonVaExBB		:= array.avg(adapMonArrNE)
		adapMonVaExCC		:= array.avg(adapMonArrOS)

adapMonArrNE_NEW			= array.avg(adapMonArrNE)
adapMonArrOB_NEW			= array.avg(adapMonArrOB)
adapMonArrOS_NEW			= array.avg(adapMonArrOS)

positionBetweenBands		= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL				= adapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncST				= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

adapMonIfCOLOR100			= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 90) : color.new(adapMonColorShort, 90)
adapMonIfCOLOR0				= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 0) : color.new(adapMonColorShort, 0)

//// ───────────────────────
/// ─── Adaptive MFI
/// ─── Display ──────
//// ───────────────────────

adapMonPlotMAIN		= plot	(showadapMonGroup ? adapMonIfVAL : na,											color = adapMonIfCOLOR100)
adapMonPlotMID		= plot	(showadapMonGroup and adapMonVarADJ ? adapMonVarNeutral : adapMonArrNE_NEW,		color = adapMonIfCOLOR100)

plot				(showadapMonGroup ? adapMonVarADJ ? 100 : adapMonArrOB_NEW : na,						color =  color.from_gradient(adapMonVarOSC, adapMonArrNE_NEW, adapMonVarADJ ? 100 : adapMonArrOB_NEW, color.new(color.gray, 70), color.new(adapMonColorShort, 0)), linewidth = 6)
plot				(showadapMonGroup ? adapMonVarADJ ? 0 : adapMonArrOS_NEW : na,							color = color.from_gradient(adapMonVarOSC, adapMonVarADJ ? 0 : adapMonArrOS_NEW, adapMonArrNE_NEW, color.new(adapMonColorLong, 0), color.new(color.gray, 70)), linewidth = 6)

fill				(adapMonPlotMID, adapMonPlotMAIN, color = adapMonIfCOLOR100, title = "Area de Tendencia")
fill				(adapMonPlotMID, adapMonPlotMAIN, adapMonIfVAL, adapMonVarADJ ? 50 : adapMonArrNE_NEW, color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

/// ─── Colors ───
colorTsiMuDiBaseLong				= PlatziGreen30
colorTsiMuDiBaseShort				= VictSecFucsia50

colorTsiMuDiDivergLong				= AllenMint60
colorTsiMuDiDivergShort				= AllenSky10
colorTsiMuDiDivergNone				= color.new(PlatziBlue80,		100)

colorTsiMuDiLineFillLong			= color.new(PlatziGreen30,		0)
colorTsiMuDiLineFillShort			= color.new(VictSecFucsia50,	0)

colorTsiMuDiText					= color.new(PlatziBlue70,		0)
colorTsiMuDiTSI						= color.new(AllenSky10,			20)

/// ─── Inputs ───
groupTsiMuDiTSIVars					= 'TSI & Divergences'
vTsiMuDiLong						= input.int		(defval = 6,		title = 'Longitud de Compra',			group = globalTSIGroupTimeframe)
vTsiMuDiShort						= input.int		(defval = 13,		title = 'Longitud de Venta',			group = globalTSIGroupTimeframe)
vTsiMuDiSignal						= input.int		(defval = 5,		title = 'Longitud de Señal',			group = globalTSIGroupTimeframe)

/// ─── divergences ───
vTsiMuDiLBR							= 5									//	Corrección a la derecha
vTsiMuDiLBL							= 5									//	Corrección a la izquierda
vTsiMuDiRangeUpper					= 30								//	Rango de corrección maximo
vTsiMuDiRangeLower					= 2									//	Rango de corrección minimo
/// ─── Show ───
showTsiMuDiPlotDiverg				= input.bool	(defval = true,		title = 'Divergencias',					group = globalTSIGroupTimeframe,		inline = "diverg show")
showTsiMuDiPlotDivergScalp			= input.bool	(defval = true,		title = 'Scalp',						group = globalTSIGroupTimeframe,		inline = "diverg show")
showTsiMuDiCloudOn					= input.bool	(defval = true,		title = 'TSI Cloud',					group = globalTSIGroupTimeframe)

vTsiMuDiSource						= globalOHL.C[0]

//// ───────────────────────
/// ─── Functions ───
//// ───────────────────────

/// function extend (smooth & tsi calculate)
FunTsiMuDiCalculateExtendTSI(_source, _long, _short) =>
	_change							= ta.change(_source)
	_smooth_single					= ta.ema(_change, _long)
	_smooth_double					= ta.ema(_smooth_single, _short)
	_x								= 80
	_plus							= 50
	_smooth							= _smooth_double
	_smooth_abs						= math.abs(_smooth_double)
	_x * (_smooth / _smooth_abs) + _plus


//// ───────────────────────

/// function calculate TSI
FunTsiMuDiCalculateDoubleSmooth(_source, _long, _short) =>
	fist_smooth						= ta.ema(_source, _long)
	ta.ema(fist_smooth, _short)

// iTsiMuDiCalculateDoubleSmooth		= FunTsiMuDiCalculateDoubleSmooth(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)

FunTsiMuDiCalculateTSI(_source, _long, _short) =>
	_change							= ta.change(_source)
	_x								= 125
	_plus							= 50
	_smooth							= FunTsiMuDiCalculateDoubleSmooth(_change, _long, _short)
	_smooth_abs						= FunTsiMuDiCalculateDoubleSmooth(math.abs(_change), _long, _short)
	_x * (_smooth / _smooth_abs) + _plus

//// ───────────────────────
/// ─── Instances ───
//// ───────────────────────

/// PRESENT
/// instance function calculate present Tsi
iTsiMuDiCalculateTSI				= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
iTsiMuDiCalculateEma				= ta.ema(iTsiMuDiCalculateTSI, vTsiMuDiSignal)

/// instance function global timeframe
iTsiMuDiCalculateTSIRange			= FunGlobalCalculateTimeframeRange(insGlobalTFCoefficient, timeframe.period)
/// ─── Timeframe present Tsi
arrTsiMuDiTF	= request.security(syminfo.tickerid,	iTsiMuDiCalculateTSIRange,	iTsiMuDiCalculateTSI,	barmerge.gaps_on)
/// ─── plot color
insTsiMuDiFillColor					= iTsiMuDiCalculateTSI > iTsiMuDiCalculateEma				? colorTsiMuDiLineFillLong	: iTsiMuDiCalculateTSI <= iTsiMuDiCalculateEma				? colorTsiMuDiLineFillShort	: na
/// ─── fill color
insTsiMuDiCloudColor				= iTsiMuDiCalculateTSI > iTsiMuDiCalculateEma				? colorTsiMuDiBaseLong		: iTsiMuDiCalculateTSI <= iTsiMuDiCalculateEma				? colorTsiMuDiBaseShort		: na

/// EXTEND
/// instances function calculate extend  Tsi
iTsiMuDiCalculateExtendTSI			= FunTsiMuDiCalculateExtendTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
iTsiMuDiCalculateExtendEma			= ta.ema(iTsiMuDiCalculateExtendTSI, vTsiMuDiSignal)
/// instance function global timeframe
iTsiMuDiCalculateExtendTSIRange		= FunGlobalCalculateTimeframeRange(insGlobalTFCoefficient, timeframe.period)
/// timeframe extend Tsi
arrTsiMuDiTFExtend	= request.security(syminfo.tickerid,	iTsiMuDiCalculateExtendTSIRange,	iTsiMuDiCalculateExtendTSI,	barmerge.gaps_on)
/// fill color extend
insTsiMuDiCloudColorExtend			= showTsiMuDiCloudOn and iTsiMuDiCalculateExtendTSI > iTsiMuDiCalculateExtendEma	? colorTsiMuDiBaseLong		: showTsiMuDiCloudOn	and iTsiMuDiCalculateExtendTSI <= iTsiMuDiCalculateExtendEma	? colorTsiMuDiBaseShort		: na

//// ───────────────────────
/// ─── Display ───
//// ───────────────────────

/// ─── Plot

 // /// ─── plot timeframe optional
// plot(arrTsiMuDiTF,																			color = color.new(AmeTrBlueFrost, 60),			linewidth = 1)
// plot(ta.ema(arrTsiMuDiTF,	vTsiMuDiSignal),												color = color.new(AmeTrBlueFrost, 60),			linewidth = 1)


/// plot extend TSI
insTsiMuDiTsiExtendPlotLine			= plot(showTsiMuDiTSIExtend ? arrTsiMuDiTFExtend : na,								color = color.new(MongoSky10, 70),		linewidth = 1)
insTsiMuDiEmaExtendPlotLine			= plot(showTsiMuDiTSIExtend ? ta.ema(arrTsiMuDiTFExtend,	vTsiMuDiSignal) : na,	color = color.new(MongoSky10, 70),		linewidth = 1)

/// fill extend
fill(insTsiMuDiTsiExtendPlotLine, insTsiMuDiEmaExtendPlotLine,															color = color.new(insTsiMuDiCloudColorExtend, 85))

/// ─── Plot present TSI
plot(showTsiMuDiTSIDivergs ? arrTsiMuDiTF	: na,																		color = color.new(PlatziBlue70, 60),			linewidth = 6)		//	plot TSI blue
plot(showTsiMuDiTSIDivergs ? ta.ema(arrTsiMuDiTF,	vTsiMuDiSignal)	: na,												color = color.new(PlatziBlue70, 60),			linewidth = 6)		//	plot EMA blue
insTsiMuDiTsiPlotLine				= plot(showTsiMuDiTSIDivergs ? arrTsiMuDiTF	: na,									color = color.new(insTsiMuDiFillColor, 30),		linewidth = 2)		//	plot TsiSI
insTsiMuDiEmaPlotLine				= plot(showTsiMuDiTSIDivergs ? ta.ema(arrTsiMuDiTF,	vTsiMuDiSignal)	: na,			color = color.new(insTsiMuDiFillColor, 30),		linewidth = 2)		//	plot EMA

/// ─── fill present
fill(insTsiMuDiTsiPlotLine, insTsiMuDiEmaPlotLine,																		color = showTsiMuDiCloudOn ? color.new(insTsiMuDiCloudColor, 70) : na)						//	fill

//// ───────────────────────
/// ─── Divergences ───
//// ───────────────────────

insTsiMuDiPLFound					= na(ta.pivotlow(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true
insTsiMuDiPHFound					= na(ta.pivothigh(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true

FunTsiMuDi_inRange(cond) =>
	insTsiMuDiBars					= ta.barssince(cond == true)
	vTsiMuDiRangeLower				<= insTsiMuDiBars and insTsiMuDiBars <= vTsiMuDiRangeUpper

//// ───────────────────────
/// ─── Compra regular ───
//// ───────────────────────

/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL						= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICELL						= low[vTsiMuDiLBR]				< ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)

tsiDiInsBULLCond					= showTsiMuDiPlotDiverg	and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insTsiMuDiPLFound

plot(showTsiMuDiTSIDivergs and		insTsiMuDiPLFound ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmacion de Compra',
			  linewidth				= 2,
			  color					= tsiDiInsBULLCond ? color.new(colorTsiMuDiDivergLong, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs and	tsiDiInsBULLCond ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Compra',
			  text					= ' Compra ',
			  style					= shape.labelup,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergLong, 10),
			  textcolor				= colorTsiMuDiText)

//// ───────────────────────
/// ─── Compra scalp ───
//// ───────────────────────

/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL						= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICEHL						= low[vTsiMuDiLBR]				> ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)
tsiDiInsHiddenBullCond				= showTsiMuDiPlotDivergScalp	and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insTsiMuDiPLFound

plot(showTsiMuDiTSIDivergs and		insTsiMuDiPLFound ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmación de Compra scalp',
			  linewidth				= 2,
			  color					= tsiDiInsHiddenBullCond ? color.new(colorTsiMuDiDivergLong, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs and	tsiDiInsHiddenBullCond ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Compra scalp',
			  text					= ' △ scalp ',
			  style					= shape.labelup,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergLong, 40),
			  textcolor				= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta regular ───
//// ───────────────────────

/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH						= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICEHH						= high[vTsiMuDiLBR]				> ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsBEARCond					= showTsiMuDiPlotDiverg	and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insTsiMuDiPHFound

plot(showTsiMuDiTSIDivergs and		insTsiMuDiPHFound ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmación de Venta',
			  linewidth				= 2,
			  color					= tsiDiInsBEARCond ? color.new(colorTsiMuDiDivergShort, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs and	tsiDiInsBEARCond ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Venta',
			  text					= ' Venta ',
			  style					= shape.labeldown,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergShort, 10),
			  textcolor				= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta scalp ───
//// ───────────────────────

/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH						= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICELH						= high[vTsiMuDiLBR]					< ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsHiddenBearCond				= showTsiMuDiPlotDivergScalp		and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insTsiMuDiPHFound

plot(showTsiMuDiTSIDivergs and		insTsiMuDiPHFound ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Confirmación de Venta scalp',
			  linewidth				= 2,
			  color					= tsiDiInsHiddenBearCond ? color.new(colorTsiMuDiDivergShort, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs and	tsiDiInsHiddenBearCond ? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset				= -vTsiMuDiLBR,
			  title					= 'Etiqueta de Venta scalp',
			  text					= ' ▽ scalp ',
			  style					= shape.labeldown,
			  location				= location.absolute,
			  color					= color.new(colorTsiMuDiDivergShort, 40),
			  textcolor				= colorTsiMuDiText)

//// ─────────────────────────────────────────────────────────────────────
