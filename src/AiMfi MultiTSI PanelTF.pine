/// ╔═══════════════════════════════╗
/// ║  AI Adaptive Money Flow Index	║
/// ╔═══════════════════════════════╗
/// ║  Tsi & Divergences			║
/// ║  @	Allen.					║
/// ╚═══════════════════════════════╝

//@version=5
indicator(title					= 'AI Mfi & Multi Tsi & Panel Mtf [🎱 Allen 㔬]',
		  shorttitle			= 'Mfi & MTsi & Panel',
		//   overlay				= false,
		// //   precision				= 2,
		  format				= format.price,
		  precision				= 4
		//   explicit_plot_zorder	= true
		  )

//// ─────────────────────────────────────────────────────────────────────

AmeTrBlueFrost							= #E1EEF9
AmeTrGrayNickel							= #F1F1F1
GraySwebSecondaryText					= #77708A
ARoPrimary								= #0035FF
MongoSky10								= #E3FCF7
BrLiYel10								= #FBFD73
BrLiYel40								= #FEF301
VictSecFucsia50							= #EA1889
PlatziGreen30							= #ADEB42
PlatziBlue50							= #24385B
PlatziBlue70							= #121F3D
PlatziBlue80							= #0C1633
UltrRose20								= #FFA3E3
AllenSky10								= #CCF8FF
AllenMint60								= #33FFAC
AllenFucsia50							= #EA1889

//// ─────────────────────────────────────────────────────────────────────

adapMonToolAdj				= "Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos"
adapMonToolMlt				= "Aumente esto para que los números de clasificación aparezcan más lejos del gráfico del oscilador"

adapMonGrpSet				= "Configuracion FMI"
adapMonGrpLim				= "Clustering Setting"
adapMonGrpApar				= "Apariencia"

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Vars ─────────
//// ───────────────────────

adapMonVarSRC				= input.source	(defval = hlc3,	title = "Fuente MFI",										group = adapMonGrpSet)
adapMonVarLENGTH			= input.int		(defval = 14,	title = "Longitud MFI",							minval = 1,	group = adapMonGrpSet)
adapMonVarDataLength		= input.int		(defval = 300,	title = "Tamaño de datos de entrenamiento",		minval = 1,	group = adapMonGrpLim)
adapMonVarIterations		= input.int		(defval = 5,	title = "Cantidad de iteraciones por barra",	minval = 1,	group = adapMonGrpLim)
adapMonVarOverbought		= input.float	(defval = 80.0,	title = "Inicio de Sobre Compra",							group = adapMonGrpLim)
adapMonVarNeutral			= input.float	(defval = 50.0,	title = "Neutral",											group = adapMonGrpLim)
adapMonVarOversold			= input.float	(defval = 20.0,	title = "Inicio de Sobre Venta",							group = adapMonGrpLim)

adapMonVarADJ				= input.bool	(defval = true,	title = "Usar MFI ajustado",								group = adapMonGrpApar,		tooltip = adapMonToolAdj)
adapMonVarMLT				= input.float	(defval = 1.0,	title = "Multiplicador",									group = adapMonGrpApar,		tooltip = adapMonToolMlt)
adapMonColorLong			= input.color	(AllenMint60,	title = "Compra",											group = adapMonGrpApar)
adapMonColorShort			= input.color	(AllenSky10,	title = "Venta",											group = adapMonGrpApar)

adapMonVaExAA				= adapMonVarOverbought
adapMonVaExBB				= adapMonVarNeutral
adapMonVaExCC				= adapMonVarOversold

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Functions ────
//// ───────────────────────

adapMonVarOSC				= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB			= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE			= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS			= array.new_float(1, adapMonVarOversold)

if nz(adapMonVarOSC) > 0
	for j = adapMonVarIterations to 1

		adapMonArrOB.clear()
		adapMonArrNE.clear()
		adapMonArrOS.clear()

		for i = adapMonVarDataLength to 0

			if math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrNE.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExBB) and math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrOB.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExBB)
				adapMonArrOS.push(adapMonVarOSC[i])
		
		adapMonVaExAA		:= array.avg(adapMonArrOB)
		adapMonVaExBB		:= array.avg(adapMonArrNE)
		adapMonVaExCC		:= array.avg(adapMonArrOS)

adapMonArrNE_NEW			= array.avg(adapMonArrNE)
adapMonArrOB_NEW			= array.avg(adapMonArrOB)
adapMonArrOS_NEW			= array.avg(adapMonArrOS)

positionBetweenBands		= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL				= adapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncST				= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

adapMonIfCOLOR100			= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 90) : color.new(adapMonColorShort, 90)
adapMonIfCOLOR0				= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 0) : color.new(adapMonColorShort, 0)

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Display ──────
//// ───────────────────────

adapMonPlotMAIN		= plot	(adapMonIfVAL,						color = adapMonIfCOLOR100)
adapMonPlotMID		= plot	(adapMonVarADJ ? adapMonVarNeutral : adapMonArrNE_NEW,		color = adapMonIfCOLOR100)

plot				(adapMonVarADJ ? 100 : adapMonArrOB_NEW,	color =  color.from_gradient(adapMonVarOSC, adapMonArrNE_NEW, adapMonVarADJ ? 100 : adapMonArrOB_NEW, color.new(color.gray, 70), color.new(adapMonColorShort, 0)), linewidth = 6)
plot				(adapMonVarADJ ? 0 : adapMonArrOS_NEW,		color = color.from_gradient(adapMonVarOSC, adapMonVarADJ ? 0 : adapMonArrOS_NEW, adapMonArrNE_NEW, color.new(adapMonColorLong, 0), color.new(color.gray, 70)), linewidth = 6)

// plotchar			(math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Lateral", "══", location.absolute, adapMonIfCOLOR0)
// plotchar			(math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW) and math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Tendencia Alcista", "──", location.absolute, adapMonIfCOLOR0)
// plotchar			(math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Tendencia Bajista", "──", location.absolute, adapMonIfCOLOR0)

plotchar			(ta.crossunder(adapMonVarOSC, adapMonArrOB_NEW) ? (adapMonVarADJ ? 100 : adapMonArrOB_NEW) + 10 : na,	"Corrección Venta",		"▼",	location.absolute, adapMonColorShort, size = size.tiny)
plotchar			(ta.crossover(adapMonVarOSC, adapMonArrOS_NEW) ? (adapMonVarADJ ? 0 : adapMonArrOS_NEW) - 10 : na,		"Corrección Compra",	"▲",	location.absolute, adapMonColorLong, size = size.tiny)

fill				(adapMonPlotMID, adapMonPlotMAIN, color = adapMonIfCOLOR100, title = "Area de Tendencia")
fill				(adapMonPlotMID, adapMonPlotMAIN, adapMonIfVAL, adapMonVarADJ ? 50 : adapMonArrNE_NEW, color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

/// ─── Colors ───
tsiDivColorBaseBull		= PlatziGreen30
tsiDivColorBaseBear		= VictSecFucsia50

tsiDivColorBull			= color.new(PlatziGreen30,		0)
tsiDivColorBear			= color.new(VictSecFucsia50,	0)
tsiDivColorHiddenBull	= color.new(PlatziGreen40,		30)
tsiDivColorHiddenBear	= color.new(WavBehFucsia50,		30)
tsiDivColorText			= color.new(PlatziBlue70,		0)
tsiDivColorNone			= color.new(AllenSky10,			100)
tsiDivColorTSI			= color.new(AllenSky10,			20)

/// ─── Inputs ───
tsiDivInputLong			= input(defval = 6,		title = 'Longitud de Compra')
tsiDivInputShort		= input(defval = 13,	title = 'Longitud de Venta')
tsiDivInputSignal		= input(defval = 4,		title = 'Longitud de la SEÑAL')

price					= close[0]

/// ─── divergences ───
tsiDivDiverLBR				= input(defval = 5,		title = 'Corrección a la derecha')
tsiDivDiverLBL				= input(defval = 5,		title = 'Corrección a la izquierda')
tsiDivDiverRangeUpper		= input(defval = 30,	title = 'Rango de corrección maximo')
tsiDivDiverRangeLower		= input(defval = 2,		title = 'Rango de corrección minimo')

/// ─── Show ───
tsiDivShowPlotBull			= input(defval = true,	title = 'Mostrar Divergencia Alcista')
tsiDivShowPlotHiddenBull	= input(defval = true,	title = 'Mostrar Divergencia scalp Alcista')
tsiDivShowPlotBear			= input(defval = true,	title = 'Mostrar Divergencia Bajista')
tsiDivShowPlotHiddenBear	= input(defval = true,	title = 'Mostrar Divergencia scalp Bajista')
tsiDivShowCloudOn			= input(defval = true,	title = 'TSI Cloud')
tsiDivShowTSI				= input(defval = false,	title = 'TSI')

//// ───────────────────────
/// ─── Functions ───
//// ───────────────────────

double_smooth(src, tsiDivInputLong, tsiDivInputShort) =>
	fist_smooth = ta.ema(src, tsiDivInputLong)
	ta.ema(fist_smooth, tsiDivInputShort)

tsiDiFuPC							= ta.change(price)
tsiDiFuDouble_smoothed_price		= double_smooth(tsiDiFuPC, tsiDivInputLong, tsiDivInputShort)
tsiDiFuDouble_smoothed_abs_price	= double_smooth(math.abs(tsiDiFuPC), tsiDivInputLong, tsiDivInputShort)
tsiDiFuTsi_value					= 68 * (tsiDiFuDouble_smoothed_price / tsiDiFuDouble_smoothed_abs_price) + 50
// tsiDiFuTsi_value					= tsiDiFuDouble_smoothed_price / tsiDiFuDouble_smoothed_abs_price * 65 + 50
tsiDiFuLagLine						= ta.ema(tsiDiFuTsi_value, tsiDivInputSignal)

/// ─── Plot data ───
tsiDiFuFillColor					= tsiDivShowCloudOn and tsiDiFuTsi_value > tsiDiFuLagLine ? tsiDivColorBull : tsiDivShowCloudOn and tsiDiFuTsi_value <= tsiDiFuLagLine ? tsiDivColorBear : na

tsiDiFuLine1						= plot(tsiDiFuTsi_value,	color = color.new(tsiDiFuFillColor, 50))
tsiDiFuLine2						= plot(ta.ema(tsiDiFuTsi_value,	tsiDivInputSignal),	color = color.new(tsiDiFuFillColor, 50))
hline(0,	title = 'Zero',	color = color.new(#000000, 50),	editable = true)

/// ─── Colour fill ───
tsiDiFuCloudColor					= tsiDivShowCloudOn and tsiDiFuTsi_value > tsiDiFuLagLine ? tsiDivColorBaseBull : tsiDivShowCloudOn and tsiDiFuTsi_value <= tsiDiFuLagLine ? tsiDivColorBaseBear : na

fill(tsiDiFuLine1,	tsiDiFuLine2,	color = color.new(tsiDiFuCloudColor, 70))

tsiDiFuTSI							= tsiDiFuTsi_value
tsiDiFuOSC							= tsiDiFuTSI

tsiDivDiTSIPlot						= plot(tsiDivShowTSI ? tsiDiFuOSC : na, linewidth = 2, color = tsiDivColorTSI, title = 'TSI')

tsiDiFuPLFound						= na(ta.pivotlow(tsiDiFuOSC, tsiDivDiverLBL, tsiDivDiverLBR)) ? false : true
tsiDiFuPHFound						= na(ta.pivothigh(tsiDiFuOSC, tsiDivDiverLBL, tsiDivDiverLBR)) ? false : true

_inRange(cond) =>
	tsiDiFuBars						= ta.barssince(cond == true)
	tsiDivDiverRangeLower			<= tsiDiFuBars and tsiDiFuBars <= tsiDivDiverRangeUpper

//// ───────────────────────
/// ─── SHOW DIVERGENCES ───
//// ───────────────────────

//// ───────────────────────
/// ─── Regular Bullish ───
//// ───────────────────────

/// ─── Osc: Higher Low ───
tsiDiInsOSCHL						= tsiDiFuOSC[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPLFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPLFound[1])

/// ─── Price: Lower Low ───
tsiDiInsPRICELL						= low[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPLFound, low[tsiDivDiverLBR], 1)

tsiDiInsBULLCond					= tsiDivShowPlotBull and tsiDiInsPRICELL and tsiDiInsOSCHL and tsiDiFuPLFound

plot(tsiDiFuPLFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmacion de Compra', linewidth = 2, color = tsiDiInsBULLCond ? tsiDivColorBull : tsiDivColorNone)

plotshape(tsiDiInsBULLCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Compra', text = ' Compra ', style = shape.labelup, location = location.absolute, color = tsiDivColorBull, textcolor = tsiDivColorText)

alertcondition(tsiDiInsBULLCond, title = 'TSI ha encontrado una divergencia Alcista', message = 'Verifique en gráfico por confirmación de COMPRA por TSI')

//// ───────────────────────
/// ─── Hidden Bullish ───
//// ───────────────────────

/// ─── Osc: Lower Low ───
tsiDiInsOSCLL						= tsiDiFuOSC[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPLFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPLFound[1])

/// ─── Price: Higher Low ───
tsiDiInsPRICEHL = low[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPLFound, low[tsiDivDiverLBR], 1)

tsiDiInsHiddenBullCond				= tsiDivShowPlotHiddenBull and tsiDiInsPRICEHL and tsiDiInsOSCLL and tsiDiFuPLFound

plot(tsiDiFuPLFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmación de Compra scalp', linewidth = 2, color = tsiDiInsHiddenBullCond ? tsiDivColorHiddenBull : tsiDivColorNone)

plotshape(tsiDiInsHiddenBullCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Compra scalp', text = ' Compra Scalp ', style = shape.labelup, location = location.absolute, color=tsiDivColorBull, textcolor = tsiDivColorText)

alertcondition(tsiDiInsHiddenBullCond, title = 'TSI ha encontrado una divergencia Alcista oculta', message = 'Verifique en gráfico por confirmación de COMPRA scalp por TSI por TSI')

//// ───────────────────────
/// ─── Regular Bearish ───
//// ───────────────────────

/// ─── Osc: Lower High ───
tsiDiInsOSCLH						= tsiDiFuOSC[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPHFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPHFound[1])

/// ─── Price: Higher High ───
tsiDiInsPRICEHH						= high[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPHFound, high[tsiDivDiverLBR], 1)

tsiDiInsBEARCond					= tsiDivShowPlotBear and tsiDiInsPRICEHH and tsiDiInsOSCLH and tsiDiFuPHFound

plot(tsiDiFuPHFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmación de Venta', linewidth = 2, color = tsiDiInsBEARCond ? tsiDivColorBear : tsiDivColorNone)

plotshape(tsiDiInsBEARCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Venta', text = ' Venta ', style = shape.labeldown, location = location.absolute, color = tsiDivColorBear, textcolor = tsiDivColorText)

alertcondition(tsiDiInsBEARCond, title = 'TSI ha encontrado una divergencia Bajista', message = 'Verifique en gráfico por confirmación de VENTA por TSI')

//// ───────────────────────
/// ─── Hidden Bearish ───
//// ───────────────────────

/// ─── Osc: Higher High ───
tsiDiInsOSCHH						= tsiDiFuOSC[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPHFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPHFound[1])

/// ─── Price: Lower High ───
tsiDiInsPRICELH						= high[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPHFound, high[tsiDivDiverLBR], 1)

tsiDiInsHiddenBearCond				= tsiDivShowPlotHiddenBear and tsiDiInsPRICELH and tsiDiInsOSCHH and tsiDiFuPHFound

plot(tsiDiFuPHFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmación de Venta scalp', linewidth = 2, color = tsiDiInsHiddenBearCond ? tsiDivColorHiddenBear : tsiDivColorNone)

plotshape(tsiDiInsHiddenBearCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Venta scalp', text = ' Venta Scalp ', style = shape.labeldown, location = location.absolute, color = tsiDivColorBear, textcolor = tsiDivColorText)

alertcondition(tsiDiInsHiddenBearCond, title = 'TSI ha encontrado una divergencia Bajista oculta', message = 'Verifique en gráfico por confirmación de VENTA scalp por TSI')


//// ─────────────────────────────────────────────────────────────────────
