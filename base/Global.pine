/// ╔═══════════════════════════════════╗
/// ║	Globals							║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

/// ───────────────────────
/// ─── Types
/// ───────────────────────

strGlobalTimeFrame						= input.string 	(defval = "Grafico",	title = "Timeframe",	group = "Global Timeframe",
			  options					=				["Grafico", "5 min", "15 min", "30 min", "1 Hora", "2 Horas", "3 Horas", "4 Horas"])
insGlobalTFCoefficient					= input.int		(defval = "2",			title = "Coef",			group = "Global Timeframe",				minval = "1",	maxval = "5",	step = 1)

/// ───────────────────────
/// ─── Types
/// ───────────────────────

type globalTypeOHL
		float O							= open
		float H							= high
		float L							= low
		float C							= close
		float V							= volume
		int   I							= bar_index

/// ───────────────────────
/// ─── Functions
/// ───────────────────────

/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		"Grafico"						=> "Chart"
		"1 seg"							=> "S"	
		"5 seg"							=> "5S"
		"10 seg"						=> "10S"
		"15 seg"						=> "15S"
		"30 seg"						=> "30S"
		"1 min"							=> "1"	
		"3 min"							=> "3"	
		"5 min"							=> "5"
		"15 min"						=> "15"
		"30 min"						=> "30"
		"1 Hora"						=> "60"
		"2 Horas"						=> "120"
		"3 Horas"						=> "180"
		"4 Horas"						=> "240"
		"8 horas"						=> "480"
		"1 Dia"							=> "D"
		"1 Dia"							=> "1D"
		"1 Semana"						=> "W"
		"1 Semana"						=> "1W"
		"1 Mes"							=> "M"
		"1 Mes"							=> "1M"

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		"arriba"						=> "top"
		"medio"							=> "middle"
		"abajo"							=> "bottom"

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		"izquierda"						=> "left"
		"centro"						=> "center"
		"derecha"						=> "right"

/// ─── function position
FunGlobalPosition(_position) =>
	switch _position
		"Externo"						=> "outside"
		"Interno"						=> "inside"

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		"Mini"							=> size.tiny
		"Pequeño"						=> size.small
		"Normal"						=> size.normal
		"Grande"						=> size.large
		"Enorme"						=> size.huge
		"Auto"							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		"NYSE"							=> "UTC-5"
		"New York"						=> "America/New_York"
		"Chicago"						=> "America/Chicago"
		"Londres"						=> "Europe/London"
		"Tokyo"							=> "Asia/Tokyo"
		"Shanghai"						=> "Asia/Shanghai"
		"Sydney"						=> "Australia/Sydney"
		"Argentina"						=> "America/Argentina/Buenos_Aires"


/// ─── function calculate MA
FunGlobalCalculateMA(_source, _length, _type) =>
	switch _type
		"SMA"							=> ta.sma	(_source, _length)
		"HMA"							=> ta.hma	(_source, _length)
		"EMA"							=> ta.ema	(_source, _length)
		"SMMA"							=> ta.rma	(_source, _length)
		"WMA"							=> ta.wma	(_source, _length)
		"VWMA"							=> ta.vwma	(_source, _length)
		"MFI"							=> ta.mfi	(_source, _length)

/// ─── Function calculate timeframe range
FunGlobalCalculateTimeframeRange(_coefficient, _timeframe) =>
	_x									= 3
	_mayor								= 500
	_minor								= 15
	_tonumber							= str.tonumber(_timeframe)
	_operat_coeff						= _tonumber * _coefficient
	_operat_minor						= _tonumber * _x
	// _if_mayor							= _tonumber > _mayor ? _tonumber : _if_minor
	// _if_minor							= _tonumber <= _minor ? _operat_minor : _operat_coeff
	_conditional						= _tonumber > _mayor ? _tonumber <= _minor ? _operat_minor : _operat_coeff : _tonumber
	// _tostring							= str.tostring(_conditional)
	str.tostring(_conditional)
	// str.tostring(_conditional)

/// ───────────────────────
/// ─── Instances
/// ───────────────────────

globalOHL								= globalTypeOHL.new()

/// Instance function timeframe
// FunGlobalTimeFrame(strGlobalTimeFrame)

//// ─────────────────────────────────────────────────────────────────────
