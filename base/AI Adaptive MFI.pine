/// ╔═══════════════════════════════╗
/// ║  AI Adaptive Money Flow Index	║
/// ║  @	Allen.					║
/// ║  ©	AlgoAlpha				║
/// ╚═══════════════════════════════╝

//@version=5
indicator("AI Adaptive Money Flow Index [Allen]", "AI MFI")

//// ───────────────────────
/// ─── Colors ──────
//// ───────────────────────

AllenSky10								= #CCF8FF
AllenMint60								= #33FFAC

//// ─────────────────────────────────────────────────────────────────────

adapMonToolAdj				= "Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos"
adapMonToolMlt				= "Aumente esto para que los números de clasificación aparezcan más lejos del gráfico del oscilador"

adapMonGrpSet				= "Configuracion FMI"
adapMonGrpLim				= "Clustering Setting"
adapMonGrpApar				= "Apariencia"

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Vars ─────────
//// ───────────────────────

adapMonVarSRC				= input.source	(defval = hlc3,	title = "Fuente MFI",							group = adapMonGrpSet)
adapMonVarLENGTH			= input.int		(defval = 14,	title = "Longitud MFI",							minval = 1,	group = adapMonGrpSet)
adapMonVarDataLength		= input.int		(defval = 300,	title = "Tamaño de datos de entrenamiento",		minval = 1,	group = adapMonGrpLim)
adapMonVarIterations		= input.int		(defval = 5,	title = "Cantidad de iteraciones por barra",	minval = 1,	group = adapMonGrpLim)
adapMonVarOverbought		= input.float	(defval = 80.0,	title = "Inicio de Sobre Compra",				group = adapMonGrpLim)
adapMonVarNeutral			= input.float	(defval = 50.0,	title = "Neutral",								group = adapMonGrpLim)
adapMonVarOversold			= input.float	(defval = 20.0,	title = "Inicio de Sobre Venta",				group = adapMonGrpLim)

adapMonVarADJ				= input.bool	(defval = true,	title = "Usar MFI ajustado",					group = adapMonGrpApar,	tooltip = adapMonToolAdj)
adapMonVarMLT				= input.float	(defval = 1.0,	title = "Multiplicador",						group = adapMonGrpApar,	tooltip = adapMonToolMlt)
adapMonColorLong			= input.color	(AllenMint60,	title = "Compra",								group = adapMonGrpApar) //#00FFBB
adapMonColorShort			= input.color	(AllenSky10,	title = "Venta",								group = adapMonGrpApar) //#FF1100

adapMonVaExAA				= adapMonVarOverbought
adapMonVaExBB				= adapMonVarNeutral
adapMonVaExCC				= adapMonVarOversold

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Functions ────
//// ───────────────────────

adapMonVarOSC				= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB			= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE			= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS			= array.new_float(1, adapMonVarOversold)

if nz(adapMonVarOSC) > 0
	for j = adapMonVarIterations to 1

		adapMonArrOB.clear()
		adapMonArrNE.clear()
		adapMonArrOS.clear()

		for i = adapMonVarDataLength to 0

			if math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrNE.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExBB) and math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrOB.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExBB)
				adapMonArrOS.push(adapMonVarOSC[i])
		
		adapMonVaExAA		:= array.avg(adapMonArrOB)
		adapMonVaExBB		:= array.avg(adapMonArrNE)
		adapMonVaExCC		:= array.avg(adapMonArrOS)

adapMonArrNE_NEW			= array.avg(adapMonArrNE)
adapMonArrOB_NEW			= array.avg(adapMonArrOB)
adapMonArrOS_NEW			= array.avg(adapMonArrOS)

positionBetweenBands		= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL				= adapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncST				= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

adapMonIfCOLOR100			= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 90) : color.new(adapMonColorShort, 90)
adapMonIfCOLOR0				= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 0) : color.new(adapMonColorShort, 0)

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Display ──────
//// ───────────────────────

adapMonPlotMAIN		= plot	(adapMonIfVAL,						color = adapMonIfCOLOR100)
adapMonPlotMID		= plot	(adapMonVarADJ ? adapMonVarNeutral : adapMonArrNE_NEW,		color = adapMonIfCOLOR100)

plot				(adapMonVarADJ ? 100 : adapMonArrOB_NEW,	color =  color.from_gradient(adapMonVarOSC, adapMonArrNE_NEW, adapMonVarADJ ? 100 : adapMonArrOB_NEW, color.new(color.gray, 70), color.new(adapMonColorShort, 0)), linewidth = 3)
plot				(adapMonVarADJ ? 0 : adapMonArrOS_NEW,		color = color.from_gradient(adapMonVarOSC, adapMonVarADJ ? 0 : adapMonArrOS_NEW, adapMonArrNE_NEW, color.new(adapMonColorLong, 0), color.new(color.gray, 70)), linewidth = 3)

plotchar			(math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Ranging Classification", "0", location.absolute, adapMonIfCOLOR0)
plotchar			(math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW) and math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Up-Trend Classification", "+", location.absolute, adapMonIfCOLOR0)
plotchar			(math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Down-Trend Classification", "-", location.absolute, adapMonIfCOLOR0)

plotchar			(ta.crossunder(adapMonVarOSC, adapMonArrOB_NEW) ? (adapMonVarADJ ? 100 : adapMonArrOB_NEW) + 10 : na,	"Corrección Venta",		"▼",	location.absolute, adapMonColorShort, size = size.small)
plotchar			(ta.crossover(adapMonVarOSC, adapMonArrOS_NEW) ? (adapMonVarADJ ? 0 : adapMonArrOS_NEW) - 10 : na,		"Corrección Compra",	"▲",	location.absolute, adapMonColorLong, size = size.small)

fill				(adapMonPlotMID, adapMonPlotMAIN, color = adapMonIfCOLOR100, title = "Area de Tendencia")
fill				(adapMonPlotMID, adapMonPlotMAIN, adapMonIfVAL, adapMonVarADJ ? 50 : adapMonArrNE_NEW, color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)

//Alerts
alertcondition(ta.crossover(adapMonVarOSC, adapMonArrNE_NEW), "Compra trend")
alertcondition(ta.crossunder(adapMonVarOSC, adapMonArrNE_NEW), "Venta trend")

alertcondition(ta.crossover(adapMonVarOSC, adapMonArrOS_NEW), "Compra Reversa")
alertcondition(ta.crossunder(adapMonVarOSC, adapMonArrOB_NEW), "Venta Reversa")

alertcondition(ta.crossover(adapMonVarOSC, adapMonArrOB_NEW), "SobreCompra")
alertcondition(ta.crossunder(adapMonVarOSC, adapMonArrOS_NEW), "SobreVenta")

alertcondition(math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW), "MFI Classification Ranging")
alertcondition(math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW) and math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW), "MFI Classification Up-Trend")
alertcondition(math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW), "MFI Classification Down-Trend")

//// ─────────────────────────────────────────────────────────────────────
